{"version":3,"sources":["app/hooks.ts","components/AsideChannels/AsideChannelsItem.tsx","components/AsideChannels/AsideChannel.tsx","components/AsideChannels/AsideButton.tsx","app/api.ts","features/user/userAPI.ts","features/user/userSlice.ts","features/channel/channelAPI.ts","features/channel/channelSlice.ts","components/AsideChannels/AsideChannels.tsx","features/contact/contactAPI.ts","features/search/searchAPI.ts","features/search/searchSlice.ts","features/contact/contactSlice.ts","components/AsideContacts/AsideContacts.tsx","components/Channel/CreateChannelForm.tsx","components/Channel/EditChannelForm.tsx","components/Body.tsx","features/post/postAPI.ts","features/post/postSlice.ts","components/Channel/Display.tsx","components/Channel/Field.tsx","components/Channel/Channel.tsx","features/direct/directAPI.ts","features/direct/directSlice.ts","components/Direct/Display.tsx","features/message/messageAPI.ts","features/message/messageSlice.ts","components/Direct/Field.tsx","components/Direct/Direct.tsx","components/EmptyMain.tsx","assets/logo.png","components/Header/HeaderLogo.tsx","components/Header/HeaderMiddle.tsx","components/Header/HeaderUser.tsx","components/Header/Header.tsx","components/Init.tsx","features/app/appSlice.ts","features/auth/authAPI.ts","features/auth/authSlice.ts","components/InitError.tsx","components/NotFound.tsx","components/Search/SearchForm.tsx","components/Search/UserList.tsx","components/Search/Search.tsx","components/Settings.tsx","features/auth/hooks.ts","components/SignIn.tsx","components/SignUp.tsx","features/auth/PrivateRoute.tsx","App.tsx","app/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","useImageUpload","url","useState","img","setImg","getBase64","callback","reader","FileReader","addEventListener","result","readAsDataURL","handleChange","info","file","status","originFileObj","imageUrl","beforeUpload","isJpgOrPng","type","message","error","isLt2M","size","dummyRequest","onSuccess","setTimeout","useErrorMessage","removeAction","dispatch","useEffect","useSuccessMessage","msg","isSucceed","success","AsideChannelsItem","children","className","AsideChannel","channel","channelId","useParams","to","id","title","name","placement","src","photo","toUpperCase","AsideButton","Icon","onClick","icon","shape","template","axios","create","baseURL","withCredentials","userAPI","get","userData","put","page","count","fetchUser","createAsyncThunk","a","rejectWithValue","response","data","errors","statusText","updateUser","getState","state","user","fetchUserChannels","portion","fetchUserContacts","userSlice","createSlice","initialState","isFetching","fetchingError","isUpdating","updateSucceed","updatingError","channels","channelsCount","channelsLastPortion","channelsTotal","contacts","contactsCount","contactsLastPortion","contactsTotal","isChannelsFetching","channelsFetchingError","isContactsFetching","contactsFetchingError","reducers","addChannel","action","push","payload","addUserContact","removeUserContact","filter","c","userChanged","userChannelsChanged","userContactsChanged","channelsFetchingErrorChanged","updateSucceedChanged","updatingErrorChanged","extraReducers","builder","addCase","pending","fulfilled","rejected","items","total","actions","channelAPI","post","fetchChannel","fetchPosts","lastPortion","createChannel","authId","auth","creatorClosed","editChannel","editorClosed","statuses","includes","channelSlice","posts","totalPosts","isPostFetching","postFetchingError","isCreatorOpened","isCreating","creationError","createdSucceed","isEditorOpened","isEditing","editingError","editedSucceed","creatorOpened","editorOpened","creationErrorChanged","createdSucceedChanged","editedSucceedChanged","editingErrorChanged","postsChanged","totalPostsChanged","lastPortionChanged","postAdded","AsideChannels","scrollRef","useRef","navigate","useNavigate","loadMoreChannels","useCallback","current","length","scrollHeight","clientHeight","ref","SearchOutlined","PlusOutlined","dataLength","next","hasMore","loader","scrollableTarget","map","reverse","contactAPI","delete","searchAPI","contact","query","fetchUsers","searchData","searchSlice","users","isUsersFetching","queryChanged","pageChanged","contactChanged","countChanged","fetchingErrorChanged","addContact","search","find","newUser","isContact","removeContact","contactSlice","contactsInProcess","addingError","removingError","addingErrorChanged","removingErrorChanged","meta","arg","AsideContacts","contactPage","userId","contactId","loadMoreContacts","renderEmpty","image","Empty","PRESENTED_IMAGE_SIMPLE","description","itemLayout","dataSource","renderItem","item","Item","Meta","avatar","UserOutlined","group","department","Option","Select","CreateChannelForm","isOpened","isLoading","succeed","totalContacts","contactsPage","Form","useForm","form","resetFields","centered","visible","onOk","submit","onCancel","okButtonProps","loading","cancelButtonProps","disabled","width","showUploadList","customRequest","onChange","MessageOutlined","onFinish","formData","rules","required","whitespace","placeholder","initialValue","mode","style","onPopupScroll","e","target","currentTarget","scrollTop","dropdownRender","menu","value","login","Text","EditChannelForm","members","Body","postAPI","sendPost","text","author","postSlice","isSending","sendingError","sendingErrorChanged","Display","bottomOffset","setBottomOffset","scrollTo","top","onScroll","undefined","TextArea","Input","Field","trim","noStyle","autoFocus","autoSize","maxRows","minRows","onPressEnter","shiftKey","preventDefault","Channel","params","bodyStyle","display","flexDirection","justifyContent","overflowY","height","subTitle","extra","creatorId","Link","directAPI","fetchContact","fetchMessages","direct","directSlice","messages","isMessagesFetching","messagesFetchingError","isContactFetching","contactFetchingError","messageAdded","messagesChanged","messageslastPortionChanged","authUser","authorId","messageAPI","sendMessage","receiverId","messageSlice","Direct","Paragraph","Typography","EmptyMain","strong","HeaderLogo","logo","alt","HeaderMiddle","HeaderUser","Header","Init","tip","init","Promise","all","unwrap","appSlice","isInit","isIniting","initChanged","initErrorChanged","authAPI","password","authorize","signIn","signUp","signOut","_","authSlice","isAuthorizing","authError","isSigningIn","signingInError","isSigningUp","signingUpError","isSigningOut","signingOutError","signingInErrorChanged","signingUpErrorChanged","signingOutErrorChanged","InitError","NotFound","SearchForm","onSubmit","String","htmlType","UserList","isInitRender","setIsInitRender","danger","Search","useSearchParams","setParams","fethingError","queryParam","contactParam","pageParam","countParam","isNaN","Number","set","pageSize","showSizeChanger","pageSizeOptions","newPage","newCount","Settings","values","useRedirectFromAuth","SignIn","Password","SignUp","setStatus","min","PrivateRoute","App","app","initError","path","element","index","store","configureStore","reducer","authReducer","userReducer","channelReducer","postReducer","appReducer","searchReducer","contactReducer","directReducer","messageReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d91d44f7.chunk.js","sourcesContent":["import { ActionCreatorWithPayload } from '@reduxjs/toolkit';\r\nimport { UploadRequestOption } from 'rc-upload/lib/interface';\r\nimport { UploadFile } from 'antd/lib/upload/interface';\r\nimport { UploadChangeParam, RcFile } from 'antd/lib/upload';\r\nimport { useState, useEffect } from 'react';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\nimport { message } from 'antd';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport const useImageUpload = (url: any) => {\r\n  const [img, setImg] = useState(url);\r\n\r\n  const handleChange = (info: UploadChangeParam<UploadFile<any>>) => {\r\n    if (info.file.status === 'done') {\r\n      getBase64(info.file.originFileObj, (imageUrl) => {\r\n        setImg(imageUrl);\r\n      });\r\n    }\r\n  };\r\n\r\n  const dummyRequest = ({ onSuccess }: UploadRequestOption<any>) => {\r\n    setTimeout(() => {\r\n      if (onSuccess) {\r\n        onSuccess('ok');\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  const getBase64 = (\r\n    img: RcFile | undefined,\r\n    callback: (url: string | null) => void\r\n  ) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () =>\r\n      callback(reader.result as string | null)\r\n    );\r\n    reader.readAsDataURL(img as Blob);\r\n  };\r\n\r\n  const beforeUpload = (file: File) => {\r\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n    if (!isJpgOrPng) {\r\n      message.error('Будь ласка, завантажте JPG або PNG файл!');\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 2;\r\n    if (!isLt2M) {\r\n      message.error('Зображення має важити не більше 2MB!');\r\n    }\r\n    return isJpgOrPng && isLt2M;\r\n  };\r\n\r\n  return {\r\n    img,\r\n    setImg,\r\n    handleChange,\r\n    beforeUpload,\r\n    dummyRequest,\r\n  };\r\n};\r\n\r\nexport const useErrorMessage = (\r\n  error: string | null,\r\n  removeAction?: ActionCreatorWithPayload<null | string>\r\n) => {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    if (error) {\r\n      message.error(error);\r\n      if (removeAction) {\r\n        dispatch(removeAction(null));\r\n      }\r\n    }\r\n  }, [error, dispatch, removeAction]);\r\n};\r\n\r\nexport const useSuccessMessage = (\r\n  msg: string,\r\n  isSucceed: boolean,\r\n  removeAction?: ActionCreatorWithPayload<null | string>\r\n) => {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    if (isSucceed) {\r\n      message.success(msg);\r\n      if (removeAction) {\r\n        dispatch(removeAction(null));\r\n      }\r\n    }\r\n  }, [isSucceed, dispatch, removeAction, msg]);\r\n};\r\n\r\nexport const useLoading = (msg: string, isLoading: boolean) => {\r\n  useEffect(() => {\r\n    let hide = () => {};\r\n    if (isLoading) {\r\n      hide = message.loading(msg);\r\n    } else {\r\n      hide();\r\n    }\r\n  }, [isLoading, msg]);\r\n};\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const AsideChannelsItem: React.FC<Props> = ({ children }) => {\r\n  return (\r\n    <div className=\"w-18 flex justify-center items-center p-2\">{children}</div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Avatar, Tooltip } from 'antd';\r\nimport { AsideChannelsItem } from './AsideChannelsItem';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { ChannelPreview } from '../../app/types';\r\n\r\ninterface Props {\r\n  channel: ChannelPreview;\r\n}\r\n\r\nexport const AsideChannel: React.FC<Props> = ({ channel }) => {\r\n  const params = useParams();\r\n  const channelId = params.channelId;\r\n\r\n  return (\r\n    <Link\r\n      to={`channel/${channel.id}`}\r\n      className={\r\n        channelId && +channelId === channel.id\r\n          ? 'block bg-blue-100 rounded-lg'\r\n          : 'block'\r\n      }\r\n    >\r\n      <AsideChannelsItem>\r\n        <Tooltip title={channel.name} placement=\"right\">\r\n          <Avatar size={48} src={channel.photo}>\r\n            {channel.name[0].toUpperCase()}\r\n          </Avatar>\r\n        </Tooltip>\r\n      </AsideChannelsItem>\r\n    </Link>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nimport { AsideChannelsItem } from './AsideChannelsItem';\r\n\r\ninterface Props {\r\n  Icon: React.ElementType;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const AsideButton: React.FC<Props> = ({ Icon, onClick }) => {\r\n  return (\r\n    <AsideChannelsItem>\r\n      <Button\r\n        icon={<Icon className=\"text-2xl\" />}\r\n        shape=\"circle\"\r\n        className=\"w-12 h-12\"\r\n        onClick={onClick}\r\n      />\r\n    </AsideChannelsItem>\r\n  );\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const template = axios.create({\r\n  baseURL: 'https://kpi-network.herokuapp.com/api/',\r\n  withCredentials: true,\r\n});\r\n","import { template } from './../../app/api';\r\nimport { SettingsFormValues } from './../../components/Settings';\r\nimport {\r\n  Response,\r\n  WithPhoto,\r\n  User,\r\n  WithId,\r\n  ItemsResponse,\r\n  ChannelPreview,\r\n} from './../../app/types';\r\n\r\nexport const userAPI = {\r\n  get: (id: number) => {\r\n    return template.get<Response<User & WithId & WithPhoto>>(`user/${id}`);\r\n  },\r\n\r\n  update: (userData: SettingsFormValues & WithPhoto) => {\r\n    return template.put<Response<{}>>('user', {\r\n      ...userData,\r\n    });\r\n  },\r\n\r\n  getChannels: (page: number, count: number) => {\r\n    return template.get<ItemsResponse<ChannelPreview[]>>(\r\n      `user/channels?page=${page}&count=${count}`\r\n    );\r\n  },\r\n\r\n  getContacts: (page: number, count: number) => {\r\n    return template.get<ItemsResponse<(User & WithId & WithPhoto)[]>>(\r\n      `user/contacts?page=${page}&count=${count}`\r\n    );\r\n  },\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { SettingsFormValues } from './../../components/Settings';\r\nimport { userAPI } from './userAPI';\r\nimport {\r\n  User,\r\n  ChannelPreview,\r\n  WithId,\r\n  WithPhoto,\r\n  Response,\r\n  ItemsResponse,\r\n} from './../../app/types';\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\nexport interface UserState {\r\n  user: (User & WithId & WithPhoto) | null;\r\n  isFetching: boolean;\r\n  fetchingError: string | null;\r\n\r\n  isUpdating: boolean;\r\n  updateSucceed: boolean;\r\n  updatingError: string | null;\r\n\r\n  channels: ChannelPreview[];\r\n  channelsCount: number;\r\n  channelsLastPortion: number;\r\n  channelsTotal: number | null;\r\n\r\n  contacts: (User & WithId & WithPhoto)[];\r\n  contactsCount: number;\r\n  contactsLastPortion: number;\r\n  contactsTotal: number | null;\r\n\r\n  isChannelsFetching: boolean;\r\n  channelsFetchingError: string | null;\r\n\r\n  isContactsFetching: boolean;\r\n  contactsFetchingError: string | null;\r\n}\r\n\r\nconst initialState: UserState = {\r\n  user: null,\r\n  isFetching: false,\r\n  fetchingError: null,\r\n\r\n  isUpdating: false,\r\n  updateSucceed: false,\r\n  updatingError: null,\r\n\r\n  channels: [],\r\n  channelsCount: 10,\r\n  channelsLastPortion: 0,\r\n  channelsTotal: null,\r\n\r\n  contacts: [],\r\n  contactsCount: 5,\r\n  contactsLastPortion: 0,\r\n  contactsTotal: null,\r\n\r\n  isChannelsFetching: false,\r\n  channelsFetchingError: null,\r\n\r\n  isContactsFetching: false,\r\n  contactsFetchingError: null,\r\n};\r\n\r\nexport const fetchUser = createAsyncThunk<\r\n  Response<User & WithId & WithPhoto>,\r\n  number,\r\n  {\r\n    rejectValue: string;\r\n  }\r\n>('user/fetched', async (id: number, { rejectWithValue }) => {\r\n  try {\r\n    const response = await userAPI.get(id);\r\n    if (response.data.errors[0]) {\r\n      return rejectWithValue(response.data.errors[0]);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (e) {\r\n    const error = e as AxiosError;\r\n    if (error.response && error.response.status === 401) {\r\n      return rejectWithValue(error.response.data.errors[0]);\r\n    }\r\n    return rejectWithValue(error.response?.statusText ?? 'Some error occured');\r\n  }\r\n});\r\n\r\nexport const updateUser = createAsyncThunk<\r\n  User & WithPhoto & WithId,\r\n  SettingsFormValues & WithPhoto,\r\n  {\r\n    rejectValue: string;\r\n  }\r\n>(\r\n  'user/updated',\r\n  async (\r\n    userData: SettingsFormValues & WithPhoto,\r\n    { rejectWithValue, getState }\r\n  ) => {\r\n    const state = getState() as { user: UserState };\r\n\r\n    try {\r\n      const response = await userAPI.update(userData);\r\n      if (response.data.errors[0]) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      return {\r\n        ...state.user.user,\r\n        ...userData,\r\n      } as User & WithPhoto & WithId;\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.status === 401) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      }\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchUserChannels = createAsyncThunk<\r\n  ItemsResponse<ChannelPreview[]>,\r\n  { portion: number; count: number },\r\n  {\r\n    rejectValue: string;\r\n  }\r\n>(\r\n  'user/channels_fetched',\r\n  async (\r\n    { portion, count }: { portion: number; count: number },\r\n    { rejectWithValue }\r\n  ) => {\r\n    try {\r\n      const response = await userAPI.getChannels(portion, count);\r\n      if (response.data.errors[0]) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.status === 401) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      }\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchUserContacts = createAsyncThunk<\r\n  ItemsResponse<(User & WithId & WithPhoto)[]>,\r\n  { portion: number; count: number },\r\n  {\r\n    rejectValue: string;\r\n  }\r\n>('user/contacts_fetched', async ({ portion, count }, { rejectWithValue }) => {\r\n  try {\r\n    const response = await userAPI.getContacts(portion, count);\r\n    if (response.data.errors[0]) {\r\n      return rejectWithValue(response.data.errors[0]);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (e) {\r\n    const error = e as AxiosError;\r\n    if (error.response && error.response.status === 401) {\r\n      return rejectWithValue(error.response.data.errors[0]);\r\n    }\r\n    return rejectWithValue(error.response?.statusText ?? 'Some error occured');\r\n  }\r\n});\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    addChannel: (state, action) => {\r\n      state.channels.push(action.payload);\r\n    },\r\n\r\n    addUserContact: (state, action) => {\r\n      state.contacts.push(action.payload);\r\n    },\r\n\r\n    removeUserContact: (state, action) => {\r\n      state.contacts = state.contacts.filter((c) => c.id !== action.payload);\r\n    },\r\n\r\n    userChanged: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n\r\n    userChannelsChanged: (state, action) => {\r\n      state.channels = action.payload;\r\n    },\r\n\r\n    userContactsChanged: (state, action) => {\r\n      state.contacts = action.payload;\r\n    },\r\n\r\n    channelsFetchingErrorChanged: (state, action) => {\r\n      state.channelsFetchingError = action.payload;\r\n    },\r\n\r\n    updateSucceedChanged: (state, action) => {\r\n      state.updateSucceed = action.payload;\r\n    },\r\n\r\n    updatingErrorChanged: (state, action) => {\r\n      state.updatingError = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchUser.pending, (state) => {\r\n        state.isFetching = true;\r\n      })\r\n      .addCase(fetchUser.fulfilled, (state, action) => {\r\n        state.isFetching = false;\r\n        state.user = action.payload.data;\r\n      })\r\n      .addCase(fetchUser.rejected, (state, action) => {\r\n        state.fetchingError = action.payload ?? null;\r\n        state.isFetching = false;\r\n      })\r\n\r\n      .addCase(updateUser.pending, (state) => {\r\n        state.isUpdating = true;\r\n      })\r\n      .addCase(updateUser.fulfilled, (state, action) => {\r\n        state.isUpdating = false;\r\n        state.updateSucceed = true;\r\n        state.user = action.payload;\r\n      })\r\n      .addCase(updateUser.rejected, (state, action) => {\r\n        state.updatingError = action.payload ?? null;\r\n        state.isUpdating = false;\r\n      })\r\n\r\n      .addCase(fetchUserChannels.pending, (state) => {\r\n        state.isChannelsFetching = true;\r\n      })\r\n      .addCase(fetchUserChannels.fulfilled, (state, action) => {\r\n        state.isChannelsFetching = false;\r\n        state.channels = [...state.channels, ...action.payload.data.items];\r\n        state.channelsLastPortion += 1;\r\n\r\n        state.channelsTotal = action.payload.data.total;\r\n      })\r\n      .addCase(fetchUserChannels.rejected, (state, action) => {\r\n        state.channelsFetchingError = action.payload ?? null;\r\n        state.isChannelsFetching = false;\r\n      })\r\n\r\n      .addCase(fetchUserContacts.pending, (state) => {\r\n        state.isContactsFetching = true;\r\n      })\r\n      .addCase(fetchUserContacts.fulfilled, (state, action) => {\r\n        state.isContactsFetching = false;\r\n        state.contacts = [...state.contacts, ...action.payload.data.items];\r\n        state.contactsLastPortion += 1;\r\n\r\n        state.contactsTotal = action.payload.data.total;\r\n      })\r\n      .addCase(fetchUserContacts.rejected, (state, action) => {\r\n        state.contactsFetchingError = action.payload ?? null;\r\n        state.isContactsFetching = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  addChannel,\r\n  userChanged,\r\n  userChannelsChanged,\r\n  userContactsChanged,\r\n  updateSucceedChanged,\r\n  updatingErrorChanged,\r\n  channelsFetchingErrorChanged,\r\n  addUserContact,\r\n  removeUserContact,\r\n} = userSlice.actions;\r\n\r\nexport default userSlice.reducer;\r\n","import { template } from '../../app/api';\r\nimport {\r\n  Response,\r\n  Channel,\r\n  WithId,\r\n  WithPhoto,\r\n  ChannelCreatedData,\r\n  ItemsResponse,\r\n  Post,\r\n} from './../../app/types';\r\n\r\nexport const channelAPI = {\r\n  get: (id: number) => {\r\n    return template.get<Response<Channel & WithId & WithPhoto>>(\r\n      `channel/${id}`\r\n    );\r\n  },\r\n\r\n  create: (channel: Channel & WithPhoto) => {\r\n    return template.post<Response<ChannelCreatedData>>('channel', {\r\n      ...channel,\r\n    });\r\n  },\r\n\r\n  update: (channel: Channel & WithId & WithPhoto) => {\r\n    return template.put<Response<{}>>(`channel/${channel.id}`, { ...channel });\r\n  },\r\n\r\n  getPosts: ({\r\n    id,\r\n    page,\r\n    count,\r\n  }: {\r\n    id: number;\r\n    page: number;\r\n    count: number;\r\n  }) => {\r\n    return template.get<ItemsResponse<(Post & WithId)[]>>(\r\n      `channel/${id}/posts?page=${page}&count=${count}`\r\n    );\r\n  },\r\n};\r\n","import { AuthState } from './../auth/authSlice';\r\nimport {\r\n  Channel,\r\n  ChannelCreatedData,\r\n  ItemsResponse,\r\n  Post,\r\n  Response,\r\n  WithId,\r\n  WithPhoto,\r\n} from './../../app/types';\r\nimport { channelAPI } from './channelAPI';\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { AxiosError } from 'axios';\r\nimport { addChannel } from '../user/userSlice';\r\n\r\nexport interface ChannelState {\r\n  channel: (Channel & WithPhoto & WithId) | null;\r\n\r\n  posts: (Post & WithId)[] | null;\r\n  totalPosts: number | null;\r\n  count: number;\r\n  lastPortion: number;\r\n  isPostFetching: boolean;\r\n  postFetchingError: string | null;\r\n\r\n  isCreatorOpened: boolean;\r\n  isCreating: boolean;\r\n  creationError: null | string;\r\n  createdSucceed: boolean;\r\n\r\n  isEditorOpened: boolean;\r\n  isEditing: boolean;\r\n  editingError: null | string;\r\n  editedSucceed: boolean;\r\n\r\n  isFetching: boolean;\r\n  fetchingError: string | null;\r\n}\r\n\r\nconst initialState: ChannelState = {\r\n  channel: null,\r\n\r\n  posts: null,\r\n  totalPosts: null,\r\n  count: 10,\r\n  lastPortion: 0,\r\n  isPostFetching: false,\r\n  postFetchingError: null,\r\n\r\n  isCreatorOpened: false,\r\n  isCreating: false,\r\n  creationError: null,\r\n  createdSucceed: false,\r\n\r\n  isEditorOpened: false,\r\n  isEditing: false,\r\n  editingError: null,\r\n  editedSucceed: false,\r\n\r\n  isFetching: false,\r\n  fetchingError: null,\r\n};\r\n\r\nexport const fetchChannel = createAsyncThunk<\r\n  Response<Channel & WithId & WithPhoto>,\r\n  number,\r\n  { rejectValue: string }\r\n>(\r\n  'channel/fetched',\r\n  async (id: number, { rejectWithValue, dispatch, getState }) => {\r\n    const state = getState() as { channel: ChannelState };\r\n    try {\r\n      const response = await channelAPI.get(id);\r\n      if (response.data.errors[0]) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      dispatch(\r\n        fetchPosts({\r\n          id,\r\n          page: state.channel.lastPortion + 1,\r\n          count: state.channel.count,\r\n        })\r\n      );\r\n\r\n      return response.data;\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.status === 404) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      }\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport const createChannel = createAsyncThunk<\r\n  Response<ChannelCreatedData>,\r\n  Channel & WithPhoto,\r\n  { rejectValue: string }\r\n>(\r\n  'channel/created',\r\n  async (channel, { dispatch, rejectWithValue, getState }) => {\r\n    const state = getState() as { auth: AuthState };\r\n    const authId = state.auth.id;\r\n    try {\r\n      const response = await channelAPI.create(channel);\r\n\r\n      if (response.data.errors[0]) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      if (!authId) {\r\n        return rejectWithValue('No creatorId provided');\r\n      }\r\n\r\n      if (response.data.data.id) {\r\n        dispatch(creatorClosed());\r\n        dispatch(\r\n          addChannel({\r\n            id: response.data.data.id,\r\n            name: channel.name,\r\n            photo: channel.photo,\r\n          })\r\n        );\r\n        return response.data;\r\n      } else {\r\n        return rejectWithValue('Unable to create channel');\r\n      }\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.status === 401) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      }\r\n\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport const editChannel = createAsyncThunk<\r\n  Channel & WithId & WithPhoto,\r\n  Channel & WithId & WithPhoto,\r\n  { rejectValue: string }\r\n>('channel/edited', async (channel, { dispatch, rejectWithValue }) => {\r\n  try {\r\n    const response = await channelAPI.update(channel);\r\n\r\n    if (response.data.errors[0]) {\r\n      return rejectWithValue(response.data.errors[0]);\r\n    }\r\n    dispatch(editorClosed());\r\n\r\n    return channel;\r\n  } catch (e) {\r\n    const error = e as AxiosError;\r\n    const statuses = [401, 404];\r\n    if (error.response && statuses.includes(error.response.status)) {\r\n      return rejectWithValue(error.response.data.errors[0]);\r\n    }\r\n\r\n    return rejectWithValue(error.response?.statusText ?? 'Some error occured');\r\n  }\r\n});\r\n\r\nexport const fetchPosts = createAsyncThunk<\r\n  ItemsResponse<(Post & WithId)[]>,\r\n  {\r\n    id: number;\r\n    page: number;\r\n    count: number;\r\n  },\r\n  { rejectValue: string }\r\n>('channel/postsFetched', async ({ id, page, count }, { rejectWithValue }) => {\r\n  try {\r\n    const response = await channelAPI.getPosts({ id, page, count });\r\n\r\n    if (response.data.errors[0]) {\r\n      return rejectWithValue(response.data.errors[0]);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (e) {\r\n    const error = e as AxiosError;\r\n\r\n    return rejectWithValue(error.response?.statusText ?? 'Some error occured');\r\n  }\r\n});\r\n\r\nconst channelSlice = createSlice({\r\n  name: 'channel',\r\n  initialState,\r\n  reducers: {\r\n    creatorOpened: (state) => {\r\n      state.isCreatorOpened = true;\r\n    },\r\n\r\n    creatorClosed: (state) => {\r\n      state.isCreatorOpened = false;\r\n    },\r\n\r\n    editorOpened: (state) => {\r\n      state.isEditorOpened = true;\r\n    },\r\n\r\n    editorClosed: (state) => {\r\n      state.isEditorOpened = false;\r\n    },\r\n\r\n    creationErrorChanged: (state, action) => {\r\n      state.creationError = action.payload;\r\n    },\r\n\r\n    createdSucceedChanged: (state, action) => {\r\n      state.createdSucceed = action.payload;\r\n    },\r\n\r\n    editedSucceedChanged: (state, action) => {\r\n      state.editedSucceed = action.payload;\r\n    },\r\n\r\n    editingErrorChanged: (state, action) => {\r\n      state.editingError = action.payload;\r\n    },\r\n\r\n    postsChanged: (state, action) => {\r\n      state.posts = action.payload;\r\n    },\r\n\r\n    totalPostsChanged: (state, action) => {\r\n      state.totalPosts = action.payload;\r\n    },\r\n\r\n    lastPortionChanged: (state, action) => {\r\n      state.lastPortion = action.payload;\r\n    },\r\n\r\n    postAdded: (state, action) => {\r\n      if (state.posts) {\r\n        state.posts.push(action.payload);\r\n      } else {\r\n        state.posts = [action.payload];\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchChannel.pending, (state) => {\r\n        state.isFetching = true;\r\n      })\r\n      .addCase(fetchChannel.fulfilled, (state, action) => {\r\n        state.isFetching = false;\r\n        state.channel = action.payload.data;\r\n        state.fetchingError = null;\r\n      })\r\n      .addCase(fetchChannel.rejected, (state, action) => {\r\n        state.channel = null;\r\n        state.isFetching = false;\r\n        state.fetchingError = action.payload ?? null;\r\n      })\r\n\r\n      .addCase(createChannel.pending, (state) => {\r\n        state.isCreating = true;\r\n      })\r\n      .addCase(createChannel.fulfilled, (state, action) => {\r\n        state.isCreating = false;\r\n        state.createdSucceed = true;\r\n      })\r\n      .addCase(createChannel.rejected, (state, action) => {\r\n        state.isCreating = false;\r\n        state.creationError = action.payload ?? null;\r\n      })\r\n\r\n      .addCase(editChannel.pending, (state) => {\r\n        state.isEditing = true;\r\n      })\r\n      .addCase(editChannel.fulfilled, (state, action) => {\r\n        state.isEditing = false;\r\n        state.editedSucceed = true;\r\n        state.channel = action.payload;\r\n      })\r\n      .addCase(editChannel.rejected, (state, action) => {\r\n        state.isEditing = false;\r\n        state.editingError = action.payload ?? null;\r\n      })\r\n\r\n      .addCase(fetchPosts.pending, (state) => {\r\n        state.isPostFetching = true;\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        if (!state.posts) {\r\n          state.posts = action.payload.data.items;\r\n        } else {\r\n          state.posts = [...action.payload.data.items, ...state.posts];\r\n        }\r\n        state.lastPortion += 1;\r\n        state.totalPosts = action.payload.data.total;\r\n        state.isPostFetching = false;\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.isPostFetching = false;\r\n        state.editingError = action.payload ?? null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  creatorOpened,\r\n  creatorClosed,\r\n  editorOpened,\r\n  editorClosed,\r\n  creationErrorChanged,\r\n  createdSucceedChanged,\r\n  editedSucceedChanged,\r\n  postsChanged,\r\n  postAdded,\r\n  lastPortionChanged,\r\n  totalPostsChanged,\r\n  editingErrorChanged,\r\n} = channelSlice.actions;\r\n\r\nexport default channelSlice.reducer;\r\n","import React, { useCallback, useEffect, useRef } from 'react';\r\n\r\nimport { PlusOutlined, SearchOutlined } from '@ant-design/icons';\r\n\r\nimport { AsideChannel } from './AsideChannel';\r\nimport { AsideButton } from './AsideButton';\r\nimport {\r\n  useAppDispatch,\r\n  useAppSelector,\r\n  useErrorMessage,\r\n  useLoading,\r\n} from '../../app/hooks';\r\nimport {\r\n  channelsFetchingErrorChanged,\r\n  fetchUserChannels,\r\n} from '../../features/user/userSlice';\r\nimport { creatorOpened } from '../../features/channel/channelSlice';\r\nimport { useNavigate } from 'react-router';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { Spin } from 'antd';\r\n\r\nexport const AsideChannels: React.FC = () => {\r\n  const scrollRef = useRef<HTMLElement>(null);\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const channels = useAppSelector((state) => state.user.channels);\r\n  const total = useAppSelector((state) => state.user.channelsTotal);\r\n  const count = useAppSelector((state) => state.user.channelsCount);\r\n  const error = useAppSelector((state) => state.user.channelsFetchingError);\r\n\r\n  useErrorMessage(error, channelsFetchingErrorChanged);\r\n\r\n  const lastPortion = useAppSelector((state) => state.user.channelsLastPortion);\r\n\r\n  const loadMoreChannels = useCallback(() => {\r\n    dispatch(\r\n      fetchUserChannels({\r\n        count: count,\r\n        portion: lastPortion + 1,\r\n      })\r\n    );\r\n  }, [count, dispatch, lastPortion]);\r\n\r\n  useEffect(() => {\r\n    if (!scrollRef.current || channels.length >= (total ?? 0)) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      channels.length &&\r\n      scrollRef.current.scrollHeight === scrollRef.current.clientHeight\r\n    ) {\r\n      loadMoreChannels();\r\n    }\r\n  }, [channels.length, loadMoreChannels, total]);\r\n\r\n  const openForm = () => {\r\n    dispatch(creatorOpened());\r\n  };\r\n\r\n  return (\r\n    <aside\r\n      id={'scrollableChannels'}\r\n      ref={scrollRef}\r\n      className=\"flex flex-col items-center bg-gray-100 overflow-y-auto\"\r\n    >\r\n      <AsideButton Icon={SearchOutlined} onClick={() => navigate('/search')} />\r\n      <AsideButton Icon={PlusOutlined} onClick={openForm} />\r\n\r\n      <InfiniteScroll\r\n        dataLength={channels.length || count * lastPortion}\r\n        next={loadMoreChannels}\r\n        hasMore={(total ?? 0) > channels.length}\r\n        loader={\r\n          <div className=\"w-full h-24 flex items-center justify-center\">\r\n            <Spin />\r\n          </div>\r\n        }\r\n        scrollableTarget=\"scrollableChannels\"\r\n      >\r\n        {channels\r\n          .map((channel) => <AsideChannel key={channel.id} channel={channel} />)\r\n          .reverse()}\r\n      </InfiniteScroll>\r\n    </aside>\r\n  );\r\n};\r\n","import { Response } from './../../app/types';\r\nimport { template } from '../../app/api';\r\n\r\nexport const contactAPI = {\r\n  add: (id: number) => {\r\n    return template.post<Response<{}>>(`contact/${id}`);\r\n  },\r\n\r\n  remove: (id: number) => {\r\n    return template.delete<Response<{}>>(`contact/${id}`);\r\n  },\r\n};\r\n","import { template } from './../../app/api';\r\nimport { User, WithId, WithPhoto } from './../../app/types';\r\nimport { ItemsResponse } from '../../app/types';\r\n\r\nexport const searchAPI = {\r\n  get: ({\r\n    contact,\r\n    count,\r\n    page,\r\n    query,\r\n  }: {\r\n    page: number;\r\n    count: number;\r\n    contact: '0' | '1' | '2';\r\n    query: string;\r\n  }) => {\r\n    const response = template.get<ItemsResponse<(User & WithId & WithPhoto)[]>>(\r\n      `search?query=${query}&count=${count}&page=${page}&contact=${contact}`\r\n    );\r\n\r\n    return response;\r\n  },\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { searchAPI } from './searchAPI';\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { WithPhoto, WithId, User, ItemsResponse } from './../../app/types';\r\n\r\nexport interface SearchState {\r\n  users: (User & WithPhoto & WithId)[];\r\n  isUsersFetching: boolean;\r\n  fetchingError: string | null;\r\n  query: string;\r\n  page: number;\r\n  count: number;\r\n  total: number | null;\r\n  contact: '0' | '1' | '2';\r\n}\r\n\r\nconst initialState: SearchState = {\r\n  users: [],\r\n  isUsersFetching: false,\r\n  fetchingError: null,\r\n  query: '',\r\n  page: 1,\r\n  count: 10,\r\n  total: null,\r\n  contact: '0',\r\n};\r\n\r\nexport const fetchUsers = createAsyncThunk<\r\n  ItemsResponse<(User & WithPhoto & WithId)[]>,\r\n  {\r\n    page: number;\r\n    count: number;\r\n    contact: '0' | '1' | '2';\r\n    query: string;\r\n  },\r\n  { rejectValue: string }\r\n>('search/usersFetched', async (searchData, { rejectWithValue }) => {\r\n  try {\r\n    const response = await searchAPI.get(searchData);\r\n    if (response.data.errors[0]) {\r\n      return rejectWithValue(response.data.errors[0]);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (e) {\r\n    const error = e as AxiosError;\r\n    if (error.response && error.response.status === 401) {\r\n      return rejectWithValue(error.response.data.errors[0]);\r\n    }\r\n    return rejectWithValue(error.response?.statusText ?? 'Some error occured');\r\n  }\r\n});\r\n\r\nconst searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState,\r\n  reducers: {\r\n    userChanged: (state, action) => {\r\n      state.users = state.users.map((user) => {\r\n        if (user.id === action.payload.id) {\r\n          return action.payload;\r\n        }\r\n\r\n        return user;\r\n      });\r\n    },\r\n    queryChanged: (state, action) => {\r\n      state.query = action.payload;\r\n    },\r\n    pageChanged: (state, action) => {\r\n      state.page = action.payload;\r\n    },\r\n    contactChanged: (state, action) => {\r\n      state.contact = action.payload;\r\n    },\r\n    countChanged: (state, action) => {\r\n      state.count = action.payload;\r\n    },\r\n\r\n    fetchingErrorChanged: (state, action) => {\r\n      state.fetchingError = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) =>\r\n    builder\r\n      .addCase(fetchUsers.pending, (state) => {\r\n        state.isUsersFetching = true;\r\n      })\r\n      .addCase(fetchUsers.fulfilled, (state, action) => {\r\n        state.isUsersFetching = false;\r\n        state.users = action.payload.data.items;\r\n        state.total = action.payload.data.total;\r\n      })\r\n      .addCase(fetchUsers.rejected, (state, action) => {\r\n        state.isUsersFetching = false;\r\n        state.fetchingError = action.payload ?? null;\r\n      }),\r\n});\r\n\r\nexport const {\r\n  contactChanged,\r\n  countChanged,\r\n  pageChanged,\r\n  queryChanged,\r\n  userChanged,\r\n  fetchingErrorChanged,\r\n} = searchSlice.actions;\r\n\r\nexport default searchSlice.reducer;\r\n","import { AxiosError } from 'axios';\r\nimport { SearchState } from '../search/searchSlice';\r\nimport { contactAPI } from './contactAPI';\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { WithId, WithPhoto } from '../../app/types';\r\nimport { User } from '../../app/types';\r\nimport { userChanged } from '../search/searchSlice';\r\nimport { addUserContact, removeUserContact } from '../user/userSlice';\r\n\r\nexport interface ContactState {\r\n  contactsInProcess: number[];\r\n  addingError: string | null;\r\n  removingError: string | null;\r\n}\r\n\r\nconst initialState: ContactState = {\r\n  contactsInProcess: [],\r\n  addingError: null,\r\n  removingError: null,\r\n};\r\n\r\nexport const addContact = createAsyncThunk<User & WithId & WithPhoto, number>(\r\n  'contact/added',\r\n  async (id: number, { getState, dispatch, rejectWithValue }) => {\r\n    const state = getState() as { search: SearchState };\r\n    try {\r\n      const response = await contactAPI.add(id);\r\n\r\n      if (response.data.errors.length) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      const user = state.search.users.find((user) => user.id === id);\r\n\r\n      if (user) {\r\n        const newUser: User & WithId & WithPhoto = {\r\n          ...user,\r\n          isContact: true,\r\n        };\r\n\r\n        dispatch(userChanged(newUser));\r\n        dispatch(addUserContact(newUser));\r\n\r\n        return newUser;\r\n      }\r\n\r\n      return rejectWithValue('User not found');\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.statusText) {\r\n        return rejectWithValue(error.response.statusText);\r\n      }\r\n\r\n      return rejectWithValue('Some error occured');\r\n    }\r\n  }\r\n);\r\n\r\nexport const removeContact = createAsyncThunk<\r\n  User & WithId & WithPhoto,\r\n  number\r\n>(\r\n  'contact/removed',\r\n  async (id: number, { getState, dispatch, rejectWithValue }) => {\r\n    const state = getState() as { search: SearchState };\r\n    try {\r\n      const response = await contactAPI.remove(id);\r\n\r\n      if (response.data.errors.length) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      const user = state.search.users.find((user) => user.id === id);\r\n\r\n      if (user) {\r\n        const newUser: User & WithId & WithPhoto = {\r\n          ...user,\r\n          isContact: false,\r\n        };\r\n        dispatch(removeUserContact(user.id));\r\n        dispatch(userChanged(newUser));\r\n\r\n        return newUser;\r\n      }\r\n\r\n      return rejectWithValue('User not found');\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.statusText) {\r\n        return rejectWithValue(error.response.statusText);\r\n      }\r\n\r\n      return rejectWithValue('Some error occured');\r\n    }\r\n  }\r\n);\r\n\r\nconst contactSlice = createSlice({\r\n  name: 'contact',\r\n  initialState,\r\n  reducers: {\r\n    addingErrorChanged: (state, action) => {\r\n      state.addingError = action.payload;\r\n    },\r\n\r\n    removingErrorChanged: (state, action) => {\r\n      state.removingError = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) =>\r\n    builder\r\n      .addCase(addContact.pending, (state, action) => {\r\n        state.contactsInProcess.push(action.meta.arg);\r\n      })\r\n      .addCase(addContact.fulfilled, (state, action) => {\r\n        state.contactsInProcess = state.contactsInProcess.filter(\r\n          (id) => id !== action.meta.arg\r\n        );\r\n      })\r\n      .addCase(addContact.rejected, (state, action) => {\r\n        state.contactsInProcess = state.contactsInProcess.filter(\r\n          (id) => id !== action.meta.arg\r\n        );\r\n        state.addingError = action.error.message ?? null;\r\n      })\r\n\r\n      .addCase(removeContact.pending, (state, action) => {\r\n        state.contactsInProcess.push(action.meta.arg);\r\n      })\r\n      .addCase(removeContact.fulfilled, (state, action) => {\r\n        state.contactsInProcess = state.contactsInProcess.filter(\r\n          (id) => id !== action.meta.arg\r\n        );\r\n      })\r\n      .addCase(removeContact.rejected, (state, action) => {\r\n        state.contactsInProcess = state.contactsInProcess.filter(\r\n          (id) => id !== action.meta.arg\r\n        );\r\n        state.removingError = action.error.message ?? null;\r\n      }),\r\n});\r\n\r\nexport const { addingErrorChanged, removingErrorChanged } =\r\n  contactSlice.actions;\r\n\r\nexport default contactSlice.reducer;\r\n","import { Avatar, List, ConfigProvider, Empty, Spin } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useAppSelector, useErrorMessage } from '../../app/hooks';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchUserContacts } from '../../features/user/userSlice';\r\nimport {\r\n  addingErrorChanged,\r\n  removingErrorChanged,\r\n} from '../../features/contact/contactSlice';\r\n\r\nexport const AsideContacts: React.FC = () => {\r\n  const scrollRef = useRef<HTMLElement>(null);\r\n  const contacts = useAppSelector((state) => state.user.contacts);\r\n  const contactsTotal = useAppSelector((state) => state.user.contactsTotal);\r\n  const contactsCount = useAppSelector((state) => state.user.contactsCount);\r\n  const contactPage = useAppSelector((state) => state.user.contactsLastPortion);\r\n  const addingError = useAppSelector((state) => state.contact.addingError);\r\n  const removingError = useAppSelector((state) => state.contact.removingError);\r\n\r\n  useErrorMessage(addingError, addingErrorChanged);\r\n  useErrorMessage(removingError, removingErrorChanged);\r\n\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const userId = params.contactId;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const loadMoreContacts = useCallback(() => {\r\n    dispatch(\r\n      fetchUserContacts({\r\n        count: contactsCount,\r\n        portion: contactPage + 1,\r\n      })\r\n    );\r\n  }, [contactPage, contactsCount, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!scrollRef.current || contacts.length >= (contactsTotal ?? 0)) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      contacts.length &&\r\n      scrollRef.current.scrollHeight === scrollRef.current.clientHeight\r\n    ) {\r\n      loadMoreContacts();\r\n    }\r\n  }, [contacts, contactsTotal, loadMoreContacts]);\r\n\r\n  return (\r\n    <aside\r\n      className={`flex-none w-56 border-l-2 p-2 overflow-auto ${\r\n        !contacts.length && 'flex items-center'\r\n      }`}\r\n      id=\"scrollableContacts\"\r\n      ref={scrollRef}\r\n    >\r\n      <ConfigProvider\r\n        renderEmpty={() => (\r\n          <Empty\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n            description=\"Ви поки що не маєте контактів\"\r\n          />\r\n        )}\r\n      >\r\n        <InfiniteScroll\r\n          dataLength={contactsCount * contactPage}\r\n          next={loadMoreContacts}\r\n          hasMore={(contactsTotal ?? 0) > contacts.length}\r\n          loader={\r\n            <div className=\"w-full h-14 flex items-center justify-center\">\r\n              <Spin />\r\n            </div>\r\n          }\r\n          scrollableTarget=\"scrollableContacts\"\r\n        >\r\n          <List\r\n            className={`w-full h-full`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={[...contacts].reverse()}\r\n            renderItem={(item) => (\r\n              <List.Item\r\n                className={\r\n                  userId && +userId === item.id\r\n                    ? 'bg-blue-100 rounded-md cursor-pointer p-2'\r\n                    : 'cursor-pointer p-2'\r\n                }\r\n                onClick={() => navigate(`direct/${item.id}`)}\r\n              >\r\n                <List.Item.Meta\r\n                  avatar={\r\n                    <Avatar\r\n                      src={item.photo}\r\n                      icon={<UserOutlined />}\r\n                      size=\"large\"\r\n                    />\r\n                  }\r\n                  title={<p className=\"truncate\">{item.name}</p>}\r\n                  description={\r\n                    <p className=\"truncate\">\r\n                      {item.status === 'student' &&\r\n                        `Студент групи ${item.group} кафедри ${item.department}`}\r\n\r\n                      {item.status === 'instructor' &&\r\n                        `Викладач кафедри ${item.department}`}\r\n                    </p>\r\n                  }\r\n                />\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </InfiniteScroll>\r\n      </ConfigProvider>\r\n    </aside>\r\n  );\r\n};\r\n","import {\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Avatar,\r\n  Select,\r\n  Typography,\r\n  Spin,\r\n} from 'antd';\r\nimport { MessageOutlined } from '@ant-design/icons';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n  useAppDispatch,\r\n  useAppSelector,\r\n  useImageUpload,\r\n  useErrorMessage,\r\n  useSuccessMessage,\r\n} from '../../app/hooks';\r\nimport {\r\n  createChannel,\r\n  creatorClosed,\r\n  creationErrorChanged,\r\n  createdSucceedChanged,\r\n} from '../../features/channel/channelSlice';\r\nimport { Channel } from '../../app/types';\r\nimport { fetchUserContacts } from '../../features/user/userSlice';\r\n\r\nconst { Option } = Select;\r\n\r\nexport const CreateChannelForm: React.FC = () => {\r\n  const isOpened = useAppSelector((state) => state.channel.isCreatorOpened);\r\n  const isLoading = useAppSelector((state) => state.channel.isCreating);\r\n  const succeed = useAppSelector((state) => state.channel.createdSucceed);\r\n  const error = useAppSelector((state) => state.channel.creationError);\r\n  const contacts = useAppSelector((state) => state.user.contacts);\r\n  const totalContacts = useAppSelector((state) => state.user.contactsTotal);\r\n  const isContactsFetching = useAppSelector(\r\n    (state) => state.user.isContactsFetching\r\n  );\r\n  const contactsCount = useAppSelector((state) => state.user.contactsCount);\r\n  const contactsPage = useAppSelector(\r\n    (state) => state.user.contactsLastPortion\r\n  );\r\n\r\n  const { img, setImg, dummyRequest, beforeUpload, handleChange } =\r\n    useImageUpload(null);\r\n  const [form] = Form.useForm();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useErrorMessage(error, creationErrorChanged);\r\n  useSuccessMessage('Канал створено', succeed, createdSucceedChanged);\r\n\r\n  useEffect(() => {\r\n    if (isOpened) {\r\n      form.resetFields();\r\n      setImg(null);\r\n    }\r\n  }, [form, isOpened, setImg]);\r\n\r\n  const close = () => {\r\n    dispatch(creatorClosed());\r\n  };\r\n\r\n  const okHandler = () => {\r\n    form.submit();\r\n  };\r\n\r\n  const scrollHandler = (e: React.UIEvent) => {\r\n    const target = e.currentTarget;\r\n    const scrollBottom =\r\n      target.scrollHeight - target.scrollTop - target.clientHeight;\r\n    if (\r\n      scrollBottom < 50 &&\r\n      !isContactsFetching &&\r\n      contactsCount * contactsPage < (totalContacts ?? 0)\r\n    ) {\r\n      dispatch(\r\n        fetchUserContacts({\r\n          count: contactsCount,\r\n          portion: contactsPage + 1,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const submitHandler = (formData: Channel) => {\r\n    dispatch(createChannel({ ...formData, photo: img }));\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Створіть свій канал\"\r\n      centered\r\n      visible={isOpened}\r\n      onOk={okHandler}\r\n      onCancel={close}\r\n      okButtonProps={{ loading: isLoading }}\r\n      cancelButtonProps={{ disabled: isLoading }}\r\n      width={800}\r\n    >\r\n      <div className=\"flex gap-5\">\r\n        <Upload\r\n          name=\"channel\"\r\n          showUploadList={false}\r\n          beforeUpload={beforeUpload}\r\n          customRequest={dummyRequest}\r\n          onChange={handleChange}\r\n        >\r\n          <Avatar\r\n            size={200}\r\n            shape=\"square\"\r\n            src={img}\r\n            icon={<MessageOutlined />}\r\n          />\r\n        </Upload>\r\n        <Form\r\n          form={form}\r\n          name=\"createChannel\"\r\n          onFinish={submitHandler}\r\n          className=\"flex-grow\"\r\n        >\r\n          <Form.Item\r\n            name=\"name\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Будь ласка, введіть назву каналу',\r\n                whitespace: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Назва каналу\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item name=\"description\" initialValue={null}>\r\n            <Input placeholder=\"Опис каналу (не обов'язково)\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item name=\"members\" initialValue={[]}>\r\n            <Select\r\n              mode=\"multiple\"\r\n              style={{ width: '100%' }}\r\n              placeholder=\"Виберіть учасників зі свого списку контактів\"\r\n              onPopupScroll={scrollHandler}\r\n              dropdownRender={(menu) => (\r\n                <div>\r\n                  {menu}\r\n                  {isContactsFetching && (\r\n                    <div className=\"flex justify-center\">\r\n                      <Spin />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            >\r\n              {contacts.map((c) => (\r\n                <Option value={c.login} key={c.id}>\r\n                  <Typography.Text>{c.login} </Typography.Text>\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n","import {\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  Upload,\r\n  Avatar,\r\n  Select,\r\n  Typography,\r\n  Tag,\r\n  Spin,\r\n} from 'antd';\r\nimport CustomTagProps from 'rc-select/lib/generate';\r\nimport { MessageOutlined } from '@ant-design/icons';\r\nimport React, { useEffect } from 'react';\r\nimport {\r\n  useAppDispatch,\r\n  useAppSelector,\r\n  useErrorMessage,\r\n  useImageUpload,\r\n  useSuccessMessage,\r\n} from '../../app/hooks';\r\nimport {\r\n  editChannel,\r\n  editedSucceedChanged,\r\n  editingErrorChanged,\r\n  editorClosed,\r\n} from '../../features/channel/channelSlice';\r\nimport { Channel } from '../../app/types';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { fetchUserContacts } from '../../features/user/userSlice';\r\n\r\nconst { Option } = Select;\r\n\r\ntype FormData = Channel & {\r\n  members: { label: React.ReactNode; value: number }[];\r\n};\r\n\r\nexport const EditChannelForm: React.FC = () => {\r\n  const user = useAppSelector((state) => state.user.user);\r\n  const contacts = useAppSelector((state) => state.user.contacts);\r\n  const channel = useAppSelector((state) => state.channel.channel);\r\n  const isOpened = useAppSelector((state) => state.channel.isEditorOpened);\r\n  const isLoading = useAppSelector((state) => state.channel.isEditing);\r\n  const error = useAppSelector((state) => state.channel.editingError);\r\n  const succeed = useAppSelector((state) => state.channel.editedSucceed);\r\n\r\n  const totalContacts = useAppSelector((state) => state.user.contactsTotal);\r\n  const isContactsFetching = useAppSelector(\r\n    (state) => state.user.isContactsFetching\r\n  );\r\n  const contactsCount = useAppSelector((state) => state.user.contactsCount);\r\n  const contactsPage = useAppSelector(\r\n    (state) => state.user.contactsLastPortion\r\n  );\r\n\r\n  const { img, setImg, dummyRequest, beforeUpload, handleChange } =\r\n    useImageUpload(channel ? channel.photo : null);\r\n  const [form] = Form.useForm();\r\n  const dispatch = useAppDispatch();\r\n\r\n  useErrorMessage(error, editingErrorChanged);\r\n  useSuccessMessage('Інформацію змінено', succeed, editedSucceedChanged);\r\n\r\n  useEffect(() => {\r\n    if (isOpened) {\r\n      form.resetFields();\r\n      setImg(channel ? channel.photo : null);\r\n    }\r\n  }, [isOpened, form, setImg, channel]);\r\n\r\n  const close = () => {\r\n    dispatch(editorClosed());\r\n  };\r\n\r\n  const okHandler = () => {\r\n    form.submit();\r\n  };\r\n\r\n  const scrollHandler = (e: React.UIEvent) => {\r\n    const target = e.currentTarget;\r\n    const scrollBottom =\r\n      target.scrollHeight - target.scrollTop - target.clientHeight;\r\n    if (\r\n      scrollBottom < 50 &&\r\n      !isContactsFetching &&\r\n      contactsCount * contactsPage < (totalContacts ?? 0)\r\n    ) {\r\n      dispatch(\r\n        fetchUserContacts({\r\n          count: contactsCount,\r\n          portion: contactsPage + 1,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const submitHandler = (formData: FormData) => {\r\n    if (channel) {\r\n      dispatch(\r\n        editChannel({\r\n          ...channel,\r\n          ...formData,\r\n          photo: img,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Налаштування каналу\"\r\n      centered\r\n      visible={isOpened}\r\n      onOk={okHandler}\r\n      onCancel={close}\r\n      okButtonProps={{ loading: isLoading }}\r\n      cancelButtonProps={{ disabled: isLoading }}\r\n      width={800}\r\n    >\r\n      <div className=\"flex gap-5\">\r\n        <Upload\r\n          name=\"channel\"\r\n          showUploadList={false}\r\n          beforeUpload={beforeUpload}\r\n          customRequest={dummyRequest}\r\n          onChange={handleChange}\r\n        >\r\n          <Avatar\r\n            size={200}\r\n            shape=\"square\"\r\n            src={img}\r\n            icon={<MessageOutlined />}\r\n          />\r\n        </Upload>\r\n        <Form\r\n          form={form}\r\n          name=\"editChannel\"\r\n          onFinish={submitHandler}\r\n          className=\"flex-grow\"\r\n        >\r\n          <Form.Item\r\n            name=\"name\"\r\n            initialValue={channel ? channel.name : ''}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Будь ласка, введіть назву каналу',\r\n                whitespace: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Назва каналу\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"description\"\r\n            initialValue={channel ? channel.description : ''}\r\n          >\r\n            <Input placeholder=\"Опис каналу (не обов'язково)\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"members\"\r\n            initialValue={channel?.members.filter(\r\n              (login) => login !== user?.login\r\n            )}\r\n          >\r\n            <Select\r\n              mode=\"multiple\"\r\n              style={{ width: '100%' }}\r\n              placeholder=\"Виберіть учасників зі свого списку контактів\"\r\n              onPopupScroll={scrollHandler}\r\n              dropdownRender={(menu) => (\r\n                <div>\r\n                  {menu}\r\n                  {isContactsFetching && (\r\n                    <div className=\"flex justify-center\">\r\n                      <Spin />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              )}\r\n            >\r\n              {contacts.map((c) => (\r\n                <Option value={c.login} key={c.id}>\r\n                  <Typography.Text>{c.login} </Typography.Text>\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { AsideChannels } from './AsideChannels/AsideChannels';\r\nimport { AsideContacts } from './AsideContacts/AsideContacts';\r\nimport { Outlet } from 'react-router';\r\nimport { CreateChannelForm } from './Channel/CreateChannelForm';\r\nimport { EditChannelForm } from './Channel/EditChannelForm';\r\n\r\nexport const Body: React.FC = () => {\r\n  return (\r\n    <>\r\n      <AsideChannels />\r\n      <main className=\"flex justify-center items-center flex-grow bg-white p-6\">\r\n        <CreateChannelForm />\r\n        <EditChannelForm />\r\n        <Outlet />\r\n      </main>\r\n      <AsideContacts />\r\n    </>\r\n  );\r\n};\r\n","import { PostCreatedData } from './../../app/types';\r\nimport { template } from '../../app/api';\r\n\r\nimport { Response, ItemsResponse, Post, WithId } from '../../app/types';\r\n\r\nexport const postAPI = {\r\n  create: (post: Omit<Post, 'author'>) => {\r\n    return template.post<Response<PostCreatedData>>('posts', { ...post });\r\n  },\r\n};\r\n","import { PostCreatedData, Response } from './../../app/types';\r\nimport { AxiosError } from 'axios';\r\nimport { WithId } from '../../app/types';\r\nimport { postAPI } from './postAPI';\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { Post } from '../../app/types';\r\nimport { ChannelState, postAdded } from '../channel/channelSlice';\r\nimport { UserState } from '../user/userSlice';\r\n\r\nexport interface PostState {\r\n  post: (Post & WithId) | null;\r\n\r\n  isSending: boolean;\r\n  sendingError: string | null;\r\n}\r\n\r\nconst initialState: PostState = {\r\n  post: null,\r\n\r\n  isSending: false,\r\n  sendingError: null,\r\n};\r\n\r\nexport const sendPost = createAsyncThunk<Response<PostCreatedData>, string>(\r\n  'post/sended',\r\n  async (text: string, { getState, dispatch, rejectWithValue }) => {\r\n    const state = getState() as { channel: ChannelState; user: UserState };\r\n    const channelId = state.channel.channel?.id;\r\n    const user = state.user.user;\r\n\r\n    try {\r\n      if (channelId) {\r\n        const post = {\r\n          text,\r\n          channelId,\r\n        };\r\n        const response = await postAPI.create(post);\r\n\r\n        dispatch(\r\n          postAdded({ id: response.data.data.id, ...post, author: user })\r\n        );\r\n        return response.data;\r\n      }\r\n\r\n      return rejectWithValue('There is no channel id provided');\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n\r\n      const statuses = [401, 404];\r\n\r\n      if (error.response?.status && statuses.includes(error.response.status)) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      } else {\r\n        return rejectWithValue(\r\n          error.response?.statusText ?? 'Some error occured'\r\n        );\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst postSlice = createSlice({\r\n  name: 'post',\r\n  initialState,\r\n\r\n  reducers: {\r\n    sendingErrorChanged: (state, action) => {\r\n      state.sendingError = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) =>\r\n    builder\r\n      .addCase(sendPost.pending, (state) => {\r\n        state.isSending = true;\r\n        state.sendingError = null;\r\n      })\r\n      .addCase(sendPost.fulfilled, (state) => {\r\n        state.isSending = false;\r\n      })\r\n      .addCase(sendPost.rejected, (state, action) => {\r\n        state.isSending = false;\r\n        state.sendingError = action.error.message ?? null;\r\n      }),\r\n});\r\n\r\nexport const { sendingErrorChanged } = postSlice.actions;\r\n\r\nexport default postSlice.reducer;\r\n","import { Avatar, ConfigProvider, Empty } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { List } from 'antd';\r\nimport {\r\n  useAppSelector,\r\n  useAppDispatch,\r\n  useErrorMessage,\r\n} from '../../app/hooks';\r\nimport { fetchPosts } from '../../features/channel/channelSlice';\r\nimport { sendingErrorChanged } from '../../features/post/postSlice';\r\n\r\nexport const Display: React.FC = () => {\r\n  const [bottomOffset, setBottomOffset] = useState(0);\r\n  const posts = useAppSelector((state) => state.channel.posts);\r\n  const total = useAppSelector((state) => state.channel.totalPosts);\r\n  const channel = useAppSelector((state) => state.channel.channel);\r\n  const page = useAppSelector((state) => state.channel.lastPortion);\r\n  const count = useAppSelector((state) => state.channel.count);\r\n  const isFetching = useAppSelector((state) => state.channel.isPostFetching);\r\n  const sendingError = useAppSelector((state) => state.message.sendingError);\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useErrorMessage(sendingError, sendingErrorChanged);\r\n\r\n  const loadMorePosts = () => {\r\n    if (!channel) return;\r\n    if ((total ?? 0) <= page * count) return;\r\n    if (scrollRef.current && scrollRef.current.scrollTop < 120 && !isFetching) {\r\n      setBottomOffset(\r\n        scrollRef.current.scrollHeight -\r\n          scrollRef.current.scrollTop -\r\n          scrollRef.current.clientHeight\r\n      );\r\n      dispatch(\r\n        fetchPosts({\r\n          id: channel.id,\r\n          count,\r\n          page: page + 1,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!scrollRef.current) return;\r\n    if (\r\n      scrollRef.current.scrollHeight > scrollRef.current.clientHeight &&\r\n      scrollRef.current.scrollTop === 0\r\n    ) {\r\n      scrollRef.current.scrollTo({\r\n        top:\r\n          scrollRef.current.scrollHeight +\r\n          scrollRef.current.clientHeight -\r\n          bottomOffset,\r\n      });\r\n    }\r\n  }, [scrollRef.current?.scrollHeight, bottomOffset]);\r\n\r\n  useEffect(() => {\r\n    if (!scrollRef.current) return;\r\n    if (\r\n      scrollRef.current.scrollHeight -\r\n        scrollRef.current.scrollTop -\r\n        scrollRef.current.clientHeight <\r\n      100\r\n    ) {\r\n      scrollRef.current.scrollTo({\r\n        top: scrollRef.current.scrollHeight,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      ref={scrollRef}\r\n      className=\"flex-grow h-3/4 overflow-y-scroll\"\r\n      onScroll={loadMorePosts}\r\n    >\r\n      <ConfigProvider\r\n        renderEmpty={() => (\r\n          <Empty\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n            description={\r\n              <span>\r\n                Канал наразі порожній.\r\n                <br /> Напишіть першим!\r\n              </span>\r\n            }\r\n          />\r\n        )}\r\n      >\r\n        <List\r\n          className={`${!posts?.length && 'flex justify-center items-center'}`}\r\n          loading={isFetching}\r\n          dataSource={posts ?? undefined}\r\n          renderItem={(item) => (\r\n            <List.Item key={item.id} className=\"bg-white rounded-sm mb-2\">\r\n              <List.Item.Meta\r\n                avatar={\r\n                  <Avatar\r\n                    size=\"large\"\r\n                    icon={<UserOutlined />}\r\n                    src={item.author.photo}\r\n                  />\r\n                }\r\n                title={item.author.name}\r\n                description={item.text}\r\n              />\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n","import { Form, Input, Spin } from 'antd';\r\nimport Text from 'antd/lib/typography/Text';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { fetchChannel } from '../../features/channel/channelSlice';\r\nimport { sendPost } from '../../features/post/postSlice';\r\n\r\nconst { TextArea } = Input;\r\n\r\ninterface FormData {\r\n  text: string;\r\n}\r\n\r\nexport const Field: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const [form] = Form.useForm();\r\n\r\n  const pressHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (!e.shiftKey) {\r\n      e.preventDefault();\r\n      form.submit();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (data: FormData) => {\r\n    form.resetFields();\r\n    if (data.text.trim()) {\r\n      dispatch(sendPost(data.text));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <Form name=\"post\" form={form} onFinish={handleSubmit}>\r\n        <Form.Item name=\"text\" noStyle>\r\n          <TextArea\r\n            autoFocus\r\n            placeholder=\"Enter your message here...\"\r\n            autoSize={{\r\n              maxRows: 6,\r\n              minRows: 1,\r\n            }}\r\n            onPressEnter={pressHandler}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import { Button, Card, Result, Spin, Typography } from 'antd';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport {\r\n  editorOpened,\r\n  fetchChannel,\r\n  lastPortionChanged,\r\n  postsChanged,\r\n  totalPostsChanged,\r\n} from '../../features/channel/channelSlice';\r\nimport { Display } from './Display';\r\nimport { Field } from './Field';\r\n\r\nexport const Channel: React.FC = () => {\r\n  const authId = useAppSelector((state) => state.auth.id);\r\n  const channel = useAppSelector((state) => state.channel.channel);\r\n  const isFetching = useAppSelector((state) => state.channel.isFetching);\r\n  const fetchingError = useAppSelector((state) => state.channel.fetchingError);\r\n  const postFetchingError = useAppSelector(\r\n    (state) => state.channel.postFetchingError\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (\r\n      params.channelId &&\r\n      (channel === null || +params.channelId !== channel.id)\r\n    ) {\r\n      dispatch(postsChanged(null));\r\n      dispatch(totalPostsChanged(null));\r\n      dispatch(lastPortionChanged(0));\r\n      dispatch(fetchChannel(+params.channelId));\r\n    }\r\n  }, [params.channelId, channel, dispatch]);\r\n\r\n  const openEditor = () => {\r\n    dispatch(editorOpened());\r\n  };\r\n\r\n  const clickHandler = () => {\r\n    if (params.channelId) {\r\n      dispatch(fetchChannel(+params.channelId));\r\n    }\r\n  };\r\n\r\n  if (channel && !fetchingError && !isFetching)\r\n    return (\r\n      <Card\r\n        title={channel.name}\r\n        extra={\r\n          channel.creatorId === authId && (\r\n            <Typography.Link onClick={openEditor}>Edit</Typography.Link>\r\n          )\r\n        }\r\n        className=\"w-full h-full flex flex-col\"\r\n        bodyStyle={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          overflowY: 'hidden',\r\n          height: '100%',\r\n        }}\r\n      >\r\n        <Display />\r\n        <Field />\r\n      </Card>\r\n    );\r\n\r\n  return (\r\n    <Card\r\n      className=\"w-full h-full flex flex-col\"\r\n      bodyStyle={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        overflowY: 'hidden',\r\n        height: '100%',\r\n      }}\r\n    >\r\n      {isFetching && !fetchingError && <Spin />}\r\n      {(fetchingError || postFetchingError) && (\r\n        <Result\r\n          status=\"warning\"\r\n          title=\"Виникла помилка під час завантаження каналу\"\r\n          subTitle={fetchingError}\r\n          extra={\r\n            <Button type=\"primary\" onClick={clickHandler} loading={isFetching}>\r\n              Спробувати ще раз\r\n            </Button>\r\n          }\r\n        />\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n","import { template } from './../../app/api';\r\nimport { Message, WithId, ItemsResponse } from './../../app/types';\r\n\r\nexport const directAPI = {\r\n  getMessages: ({\r\n    id,\r\n    page,\r\n    count,\r\n  }: {\r\n    id: number;\r\n    page: number;\r\n    count: number;\r\n  }) => {\r\n    return template.get<ItemsResponse<(Message & WithId)[]>>(\r\n      `direct/${id}?page=${page}&count=${count}`\r\n    );\r\n  },\r\n};\r\n","import { directAPI } from './../direct/directAPI';\r\nimport { Message, Response, User, WithId, WithPhoto } from './../../app/types';\r\nimport { AxiosError } from 'axios';\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { ItemsResponse } from '../../app/types';\r\nimport { userAPI } from '../user/userAPI';\r\n\r\nexport interface DirectState {\r\n  contact: (User & WithId & WithPhoto) | null;\r\n  messages: (Message & WithId)[];\r\n  total: number | null;\r\n  lastPortion: number;\r\n  count: number;\r\n\r\n  isMessagesFetching: boolean;\r\n  messagesFetchingError: string | null;\r\n\r\n  isContactFetching: boolean;\r\n  contactFetchingError: null | string;\r\n}\r\n\r\nconst initialState: DirectState = {\r\n  contact: null,\r\n  messages: [],\r\n  total: null,\r\n  lastPortion: 0,\r\n  count: 7,\r\n\r\n  isMessagesFetching: false,\r\n  messagesFetchingError: null,\r\n\r\n  isContactFetching: false,\r\n  contactFetchingError: null,\r\n};\r\n\r\nexport const fetchContact = createAsyncThunk<\r\n  Response<User & WithId & WithPhoto>,\r\n  number,\r\n  { rejectValue: string }\r\n>(\r\n  'direct/contactFetched',\r\n  async (id: number, { rejectWithValue, dispatch, getState }) => {\r\n    const state = getState() as { direct: DirectState };\r\n    try {\r\n      const response = await userAPI.get(id);\r\n      if (response.data.errors[0]) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      dispatch(\r\n        fetchMessages({\r\n          id,\r\n          page: state.direct.lastPortion + 1,\r\n          count: state.direct.count,\r\n        })\r\n      );\r\n\r\n      return response.data;\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.status === 401) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      }\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchMessages = createAsyncThunk<\r\n  ItemsResponse<(Message & WithId)[]>,\r\n  {\r\n    id: number;\r\n    page: number;\r\n    count: number;\r\n  },\r\n  { rejectValue: string }\r\n>(\r\n  'direct/messagesFetched',\r\n  async ({ id, page, count }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await directAPI.getMessages({ id, page, count });\r\n\r\n      if (response.data.errors[0]) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.status === 401) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      }\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nconst directSlice = createSlice({\r\n  name: 'direct',\r\n  initialState,\r\n  reducers: {\r\n    messageAdded: (state, action) => {\r\n      if (state.messages) {\r\n        state.messages.push(action.payload);\r\n      } else {\r\n        state.messages = [action.payload];\r\n      }\r\n    },\r\n\r\n    messagesChanged: (state, action) => {\r\n      state.messages = action.payload;\r\n    },\r\n\r\n    messageslastPortionChanged: (state, action) => {\r\n      state.lastPortion = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) =>\r\n    builder\r\n      .addCase(fetchContact.pending, (state) => {\r\n        state.isContactFetching = true;\r\n      })\r\n      .addCase(fetchContact.fulfilled, (state, action) => {\r\n        state.isContactFetching = false;\r\n        state.contact = action.payload.data;\r\n      })\r\n      .addCase(fetchContact.rejected, (state, action) => {\r\n        state.isContactFetching = false;\r\n        state.contactFetchingError = action.payload ?? null;\r\n      })\r\n\r\n      .addCase(fetchMessages.pending, (state) => {\r\n        state.isMessagesFetching = true;\r\n      })\r\n      .addCase(fetchMessages.fulfilled, (state, action) => {\r\n        state.isMessagesFetching = false;\r\n        if (state.messages) {\r\n          state.messages = [...action.payload.data.items, ...state.messages];\r\n        } else {\r\n          state.messages = action.payload.data.items;\r\n        }\r\n\r\n        state.lastPortion = state.lastPortion + 1;\r\n        state.total = action.payload.data.total;\r\n      })\r\n      .addCase(fetchMessages.rejected, (state, action) => {\r\n        state.isMessagesFetching = false;\r\n        state.messagesFetchingError = action.payload ?? null;\r\n      }),\r\n});\r\n\r\nexport const { messageAdded, messagesChanged, messageslastPortionChanged } =\r\n  directSlice.actions;\r\n\r\nexport default directSlice.reducer;\r\n","import { Avatar, ConfigProvider, Empty } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { List } from 'antd';\r\nimport { useAppSelector, useErrorMessage } from '../../app/hooks';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchMessages } from '../../features/direct/directSlice';\r\nimport { fetchingErrorChanged } from '../../features/search/searchSlice';\r\n\r\nexport const Display: React.FC = () => {\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n  const [bottomOffset, setBottomOffset] = useState(0);\r\n  const contact = useAppSelector((state) => state.direct.contact);\r\n  const page = useAppSelector((state) => state.direct.lastPortion);\r\n  const count = useAppSelector((state) => state.direct.count);\r\n  const total = useAppSelector((state) => state.direct.total);\r\n  const messages = useAppSelector((state) => state.direct.messages);\r\n  const isFetching = useAppSelector((state) => state.direct.isMessagesFetching);\r\n  const fetchingError = useAppSelector((state) => state.message.sendingError);\r\n  const authUser = useAppSelector((state) => state.user.user);\r\n\r\n  useErrorMessage(fetchingError, fetchingErrorChanged);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const loadMoreMessages = () => {\r\n    if (!contact) return;\r\n    if ((total ?? 0) <= page * count) return;\r\n    if (scrollRef.current && scrollRef.current.scrollTop < 120 && !isFetching) {\r\n      setBottomOffset(\r\n        scrollRef.current.scrollHeight -\r\n          scrollRef.current.scrollTop -\r\n          scrollRef.current.clientHeight\r\n      );\r\n      dispatch(\r\n        fetchMessages({\r\n          id: contact.id,\r\n          count,\r\n          page: page + 1,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!scrollRef.current) return;\r\n    if (\r\n      scrollRef.current.scrollHeight > scrollRef.current.clientHeight &&\r\n      scrollRef.current.scrollTop === 0\r\n    ) {\r\n      scrollRef.current.scrollTo({\r\n        top:\r\n          scrollRef.current.scrollHeight +\r\n          scrollRef.current.clientHeight -\r\n          bottomOffset,\r\n      });\r\n    }\r\n  }, [scrollRef.current?.scrollHeight, bottomOffset]);\r\n\r\n  useEffect(() => {\r\n    if (!scrollRef.current) return;\r\n    if (\r\n      scrollRef.current.scrollHeight -\r\n        scrollRef.current.scrollTop -\r\n        scrollRef.current.clientHeight <\r\n      100\r\n    ) {\r\n      scrollRef.current.scrollTo({\r\n        top: scrollRef.current.scrollHeight,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      ref={scrollRef}\r\n      id=\"ScrollableMessages\"\r\n      className=\"flex-grow h-3/4 overflow-y-scroll\"\r\n      onScroll={loadMoreMessages}\r\n    >\r\n      <ConfigProvider\r\n        renderEmpty={() => (\r\n          <Empty\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n            description={\r\n              <span>\r\n                Директ наразі порожній.\r\n                <br /> Напишіть першим!\r\n              </span>\r\n            }\r\n          />\r\n        )}\r\n      >\r\n        <List\r\n          className={`${\r\n            !messages?.length && 'flex justify-center items-center'\r\n          }`}\r\n          dataSource={messages ? messages : undefined}\r\n          loading={isFetching}\r\n          renderItem={(message) => (\r\n            <List.Item key={message.id} className=\"bg-white rounded-sm mb-2\">\r\n              {message.authorId === contact?.id && (\r\n                <List.Item.Meta\r\n                  avatar={\r\n                    <Avatar\r\n                      size=\"large\"\r\n                      icon={<UserOutlined />}\r\n                      src={contact.photo}\r\n                    />\r\n                  }\r\n                  title={contact.name}\r\n                  description={message.text}\r\n                />\r\n              )}\r\n\r\n              {message.authorId === authUser?.id && (\r\n                <List.Item.Meta\r\n                  avatar={\r\n                    <Avatar\r\n                      size=\"large\"\r\n                      icon={<UserOutlined />}\r\n                      src={authUser.photo}\r\n                    />\r\n                  }\r\n                  title={authUser.name}\r\n                  description={message.text}\r\n                />\r\n              )}\r\n            </List.Item>\r\n          )}\r\n        />\r\n      </ConfigProvider>\r\n    </div>\r\n  );\r\n};\r\n","import { template } from './../../app/api';\r\nimport { Response, MessageCreatedData, Message } from './../../app/types';\r\nexport const messageAPI = {\r\n  create: (message: Message) => {\r\n    return template.post<Response<MessageCreatedData>>('message', message);\r\n  },\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { AuthState } from './../auth/authSlice';\r\nimport { messageAPI } from './messageAPI';\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { DirectState, messageAdded } from '../direct/directSlice';\r\nimport { MessageCreatedData, Message, Response } from './../../app/types';\r\nexport interface MessageState {\r\n  message: Message | null;\r\n\r\n  isSending: boolean;\r\n  sendingError: string | null;\r\n}\r\n\r\nconst initialState: MessageState = {\r\n  message: null,\r\n\r\n  isSending: false,\r\n  sendingError: null,\r\n};\r\n\r\nexport const sendMessage = createAsyncThunk<\r\n  Response<MessageCreatedData>,\r\n  string\r\n>(\r\n  'message/sended',\r\n  async (text: string, { getState, dispatch, rejectWithValue }) => {\r\n    const state = getState() as { direct: DirectState; auth: AuthState };\r\n    const contactId = state.direct.contact?.id;\r\n    const authId = state.auth.id;\r\n\r\n    try {\r\n      if (contactId && authId) {\r\n        const response = await messageAPI.create({\r\n          receiverId: contactId,\r\n          authorId: authId,\r\n          text,\r\n        });\r\n\r\n        dispatch(\r\n          messageAdded({\r\n            id: response.data.data.id,\r\n            text,\r\n            authorId: authId,\r\n            receiverId: contactId,\r\n          })\r\n        );\r\n        return response.data;\r\n      }\r\n\r\n      return rejectWithValue('There is no user id provided');\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n\r\n      const statuses = [401];\r\n\r\n      if (error.response?.status && statuses.includes(error.response.status)) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      } else {\r\n        return rejectWithValue(\r\n          error.response?.statusText ?? 'Some error occured'\r\n        );\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst messageSlice = createSlice({\r\n  name: 'message',\r\n  initialState,\r\n\r\n  reducers: {\r\n    sendingErrorChanged: (state, action) => {\r\n      state.sendingError = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) =>\r\n    builder\r\n      .addCase(sendMessage.pending, (state) => {\r\n        state.isSending = true;\r\n        state.sendingError = null;\r\n      })\r\n      .addCase(sendMessage.fulfilled, (state) => {\r\n        state.isSending = false;\r\n      })\r\n      .addCase(sendMessage.rejected, (state, action) => {\r\n        state.isSending = false;\r\n        state.sendingError = action.error.message ?? null;\r\n      }),\r\n});\r\n\r\nexport const { sendingErrorChanged } = messageSlice.actions;\r\n\r\nexport default messageSlice.reducer;\r\n","import { Form, Input, Spin } from 'antd';\r\nimport React from 'react';\r\nimport { useAppDispatch } from '../../app/hooks';\r\nimport { sendMessage } from '../../features/message/messageSlice';\r\n\r\nconst { TextArea } = Input;\r\n\r\ninterface FormData {\r\n  text: string;\r\n}\r\n\r\nexport const Field: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const [form] = Form.useForm();\r\n\r\n  const pressHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (!e.shiftKey) {\r\n      e.preventDefault();\r\n      form.submit();\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (data: FormData) => {\r\n    form.resetFields();\r\n    if (data.text.trim()) {\r\n      dispatch(sendMessage(data.text));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full\">\r\n      <Form name=\"message\" form={form} onFinish={handleSubmit}>\r\n        <Form.Item name=\"text\" noStyle>\r\n          <TextArea\r\n            autoFocus\r\n            placeholder=\"Enter your message here...\"\r\n            autoSize={{\r\n              maxRows: 6,\r\n              minRows: 1,\r\n            }}\r\n            onPressEnter={pressHandler}\r\n          />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import { Avatar, Button, Card, Result, Spin, Typography } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\n\r\nimport {\r\n  fetchContact,\r\n  messagesChanged,\r\n  messageslastPortionChanged,\r\n} from '../../features/direct/directSlice';\r\nimport { Display } from '../Direct/Display';\r\nimport { Field } from '../Direct/Field';\r\n\r\nexport const Direct: React.FC = () => {\r\n  const contact = useAppSelector((state) => state.direct.contact);\r\n  const isFetching = useAppSelector((state) => state.direct.isContactFetching);\r\n  const fetchingError = useAppSelector(\r\n    (state) => state.direct.contactFetchingError\r\n  );\r\n  const messagesFetchingError = useAppSelector(\r\n    (state) => state.direct.messagesFetchingError\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (\r\n      params.contactId &&\r\n      (contact === null || +params.contactId !== contact.id)\r\n    ) {\r\n      dispatch(messagesChanged(null));\r\n      dispatch(messageslastPortionChanged(0));\r\n      dispatch(fetchContact(+params.contactId));\r\n    }\r\n  }, [params.contactId, dispatch, contact]);\r\n\r\n  const clickHandler = () => {\r\n    if (params.channelId) {\r\n      dispatch(fetchContact(+params.channelId));\r\n    }\r\n  };\r\n\r\n  if (contact && !fetchingError && !isFetching)\r\n    return (\r\n      <Card\r\n        title={\r\n          <div className=\"flex gap-2 items-center\">\r\n            <Avatar\r\n              src={contact.photo}\r\n              icon={<UserOutlined />}\r\n              size={'large'}\r\n            />\r\n            <p>{contact.name}</p>\r\n          </div>\r\n        }\r\n        extra={<Typography.Link>Edit</Typography.Link>}\r\n        className=\"w-full h-full flex flex-col\"\r\n        bodyStyle={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          overflowY: 'hidden',\r\n          height: '100%',\r\n        }}\r\n      >\r\n        <Display />\r\n        <Field />\r\n      </Card>\r\n    );\r\n\r\n  return (\r\n    <Card\r\n      className=\"w-full h-full flex flex-col\"\r\n      bodyStyle={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        overflowY: 'hidden',\r\n        height: '100%',\r\n      }}\r\n    >\r\n      {isFetching && !fetchingError && <Spin />}\r\n      {(fetchingError || messagesFetchingError) && (\r\n        <Result\r\n          status=\"warning\"\r\n          title=\"Виникла помилка під час завантаження\"\r\n          subTitle={fetchingError}\r\n          extra={\r\n            <Button type=\"primary\" onClick={clickHandler} loading={isFetching}>\r\n              Спробувати ще раз\r\n            </Button>\r\n          }\r\n        />\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n","import { Button, Empty } from 'antd';\r\n\r\nimport { Typography } from 'antd';\r\n\r\nimport React from 'react';\r\nimport { useAppDispatch } from '../app/hooks';\r\nimport { creatorOpened } from '../features/channel/channelSlice';\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nexport const EmptyMain: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const openForm = () => {\r\n    dispatch(creatorOpened());\r\n  };\r\n\r\n  return (\r\n    <Empty\r\n      className=\"\"\r\n      description={\r\n        <div>\r\n          <Paragraph strong>Почніть свою роботу зі створеня каналу</Paragraph>\r\n          <Button type=\"primary\" onClick={openForm}>\r\n            Створити канал\r\n          </Button>\r\n        </div>\r\n      }\r\n    />\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.da23b606.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport logo from '../../assets/logo.png';\r\n\r\nexport const HeaderLogo: React.FC = () => {\r\n  return (\r\n    <div className=\"flex justify-center items-center flex-none w-18 p-1\">\r\n      <Link to=\"/\">\r\n        <img src={logo} alt=\"kpi logo\" className=\"w-14\" />\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const HeaderMiddle: React.FC = () => {\r\n  return <div className=\"flex-grow p-1\"></div>;\r\n};\r\n","import React from 'react';\r\n\r\nimport { Avatar } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\nimport Text from 'antd/lib/typography/Text';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const HeaderUser: React.FC = () => {\r\n  const authUser = useAppSelector((state) => state.user.user);\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-2 flex-none w-56 py-1 pl-1 pr-4\">\r\n      {authUser && (\r\n        <Link to=\"/settings\">\r\n          <div className=\"flex flex-grow items-center gap-2 overflow-hidden group\">\r\n            <Avatar\r\n              size={48}\r\n              icon={<UserOutlined />}\r\n              src={authUser.photo}\r\n              className=\"flex-none\"\r\n            />\r\n            <Text\r\n              strong\r\n              className=\"text-base truncate group-hover:text-blue-400\"\r\n            >\r\n              {authUser.login}\r\n            </Text>\r\n          </div>\r\n        </Link>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { HeaderLogo } from './HeaderLogo';\r\nimport { HeaderMiddle } from './HeaderMiddle';\r\nimport { HeaderUser } from './HeaderUser';\r\n\r\nexport const Header: React.FC = () => {\r\n  return (\r\n    <header className=\"flex items-center border-b-2 bg-gray-100\">\r\n      <HeaderLogo />\r\n      <HeaderMiddle />\r\n      <HeaderUser />\r\n    </header>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nexport const Init: React.FC = () => {\r\n  return (\r\n    <div className=\"h-screen flex justify-center items-center\">\r\n      <Spin\r\n        size=\"large\"\r\n        tip={<span className=\"text-lg\">Loading app . . .</span>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  fetchUser,\r\n  fetchUserChannels,\r\n  fetchUserContacts,\r\n  UserState,\r\n} from './../user/userSlice';\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n\r\ninterface AppState {\r\n  isInit: boolean;\r\n  isIniting: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n  isInit: false,\r\n  isIniting: false,\r\n  error: null,\r\n};\r\n\r\nexport const init = createAsyncThunk(\r\n  'app/init',\r\n  async (id: number, { dispatch, getState }) => {\r\n    const state = getState() as { user: UserState };\r\n    return await Promise.all([\r\n      dispatch(fetchUser(id)).unwrap(),\r\n      dispatch(\r\n        fetchUserChannels({\r\n          portion: 1,\r\n          count: state.user.channelsCount,\r\n        })\r\n      ).unwrap(),\r\n      dispatch(\r\n        fetchUserContacts({\r\n          count: state.user.contactsCount,\r\n          portion: 1,\r\n        })\r\n      ).unwrap(),\r\n    ]);\r\n  }\r\n);\r\n\r\nconst appSlice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    initChanged: (state, action) => {\r\n      state.isInit = action.payload;\r\n    },\r\n    initErrorChanged: (state, action) => {\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(init.pending, (state) => {\r\n        state.isIniting = true;\r\n      })\r\n      .addCase(init.fulfilled, (state) => {\r\n        state.isIniting = false;\r\n        state.isInit = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(init.rejected, (state, action) => {\r\n        state.isIniting = false;\r\n        state.isInit = false;\r\n        state.error = action.error.message ?? null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { initChanged, initErrorChanged } = appSlice.actions;\r\n\r\nexport default appSlice.reducer;\r\n","import { template } from './../../app/api';\r\nimport { AuthData, Response, User } from './../../app/types';\r\nimport { SignInData } from './authSlice';\r\n\r\nexport const authAPI = {\r\n  authorize: () => {\r\n    return template.get<Response<AuthData>>('session');\r\n  },\r\n\r\n  signIn: ({ login, password }: SignInData) => {\r\n    return template.post<Response<AuthData>>('session', {\r\n      login,\r\n      password,\r\n    });\r\n  },\r\n\r\n  signUp: (user: User) => {\r\n    return template.post<Response<AuthData>>('user', {\r\n      ...user,\r\n    });\r\n  },\r\n\r\n  signOut: () => {\r\n    return template.delete<Response<AuthData>>('session');\r\n  },\r\n};\r\n","import { AuthData } from './../../app/types';\r\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { User, Response } from '../../app/types';\r\nimport { authAPI } from './authAPI';\r\nimport { AxiosError } from 'axios';\r\nimport {\r\n  userChanged,\r\n  userChannelsChanged,\r\n  userContactsChanged,\r\n} from '../user/userSlice';\r\n\r\nexport interface SignInData {\r\n  login: string;\r\n  password: string;\r\n}\r\n\r\nexport interface AuthState {\r\n  id: number | null;\r\n\r\n  isAuthorizing: boolean;\r\n  authError: string | null;\r\n\r\n  isSigningIn: boolean;\r\n  signingInError: string | null;\r\n\r\n  isSigningUp: boolean;\r\n  signingUpError: string | null;\r\n\r\n  isSigningOut: boolean;\r\n  signingOutError: string | null;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  id: null,\r\n\r\n  isAuthorizing: true,\r\n  authError: null,\r\n\r\n  isSigningIn: false,\r\n  signingInError: null,\r\n\r\n  isSigningUp: false,\r\n  signingUpError: null,\r\n\r\n  isSigningOut: false,\r\n  signingOutError: null,\r\n};\r\n\r\nexport const authorize = createAsyncThunk('auth/authorized', async () => {\r\n  const response = await authAPI.authorize();\r\n\r\n  return response.data;\r\n});\r\n\r\nexport const signIn = createAsyncThunk<\r\n  Response<AuthData>,\r\n  SignInData,\r\n  {\r\n    rejectValue: string;\r\n  }\r\n>(\r\n  'auth/signed_in',\r\n  async ({ login, password }: SignInData, { rejectWithValue }) => {\r\n    try {\r\n      const response = await authAPI.signIn({ login, password });\r\n      if (response.data.errors[0]) {\r\n        return rejectWithValue(response.data.errors[0]);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (e) {\r\n      const error = e as AxiosError;\r\n      if (error.response && error.response.status === 401) {\r\n        return rejectWithValue(error.response.data.errors[0]);\r\n      }\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport const signUp = createAsyncThunk<\r\n  Response<AuthData>,\r\n  User,\r\n  {\r\n    rejectValue: string;\r\n  }\r\n>('auth/signed_up', async (user: User, { rejectWithValue }) => {\r\n  try {\r\n    const response = await authAPI.signUp(user);\r\n    return response.data;\r\n  } catch (e) {\r\n    const error = e as AxiosError;\r\n    const statuses = [400, 404, 409];\r\n\r\n    if (error.response?.status && statuses.includes(error.response.status)) {\r\n      return rejectWithValue(error.response.data.errors[0]);\r\n    } else {\r\n      return rejectWithValue(\r\n        error.response?.statusText ?? 'Some error occured'\r\n      );\r\n    }\r\n  }\r\n});\r\n\r\nexport const signOut = createAsyncThunk(\r\n  'auth/signed_out',\r\n  async (_, { dispatch }) => {\r\n    const response = await authAPI.signOut();\r\n    if (!response.data.errors.length) {\r\n      dispatch(userChanged(null));\r\n      dispatch(userChannelsChanged([]));\r\n      dispatch(userContactsChanged([]));\r\n    }\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    signingInErrorChanged: (state, action) => {\r\n      state.signingInError = action.payload;\r\n    },\r\n    signingUpErrorChanged: (state, action) => {\r\n      state.signingUpError = action.payload;\r\n    },\r\n\r\n    signingOutErrorChanged: (state, action) => {\r\n      state.signingOutError = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(authorize.pending, (state) => {\r\n        state.isAuthorizing = true;\r\n        state.id = null;\r\n      })\r\n      .addCase(authorize.fulfilled, (state, action) => {\r\n        state.isAuthorizing = false;\r\n        state.authError = null;\r\n        if (!action.payload.errors.length && action.payload.data.id) {\r\n          state.id = action.payload.data.id;\r\n        }\r\n      })\r\n      .addCase(authorize.rejected, (state, action) => {\r\n        state.authError = action.error.message ?? null;\r\n        state.isAuthorizing = false;\r\n      })\r\n\r\n      .addCase(signIn.pending, (state) => {\r\n        state.isSigningIn = true;\r\n      })\r\n      .addCase(signIn.fulfilled, (state, action) => {\r\n        state.isSigningIn = false;\r\n        if (action.payload.data.id) {\r\n          state.id = action.payload.data.id;\r\n        }\r\n      })\r\n      .addCase(signIn.rejected, (state, action) => {\r\n        state.signingInError = action.payload ?? null;\r\n        state.isSigningIn = false;\r\n      })\r\n\r\n      .addCase(signUp.pending, (state) => {\r\n        state.isSigningUp = true;\r\n      })\r\n      .addCase(signUp.fulfilled, (state, action) => {\r\n        state.isSigningUp = false;\r\n        if (!action.payload.errors.length && action.payload.data.id) {\r\n          state.id = action.payload.data.id;\r\n        }\r\n      })\r\n      .addCase(signUp.rejected, (state, action) => {\r\n        state.signingUpError = action.payload ?? null;\r\n        state.isSigningUp = false;\r\n      })\r\n\r\n      .addCase(signOut.pending, (state) => {\r\n        state.isSigningOut = true;\r\n      })\r\n      .addCase(signOut.fulfilled, (state) => {\r\n        state.isSigningOut = false;\r\n        state.id = null;\r\n      })\r\n      .addCase(signOut.rejected, (state, action) => {\r\n        state.signingOutError = action.error.message ?? null;\r\n        state.isSigningOut = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const {\r\n  signingInErrorChanged,\r\n  signingUpErrorChanged,\r\n  signingOutErrorChanged,\r\n} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;\r\n","import { Button, Result } from 'antd';\r\nimport React from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\r\nimport { init } from '../features/app/appSlice';\r\nimport { authorize } from '../features/auth/authSlice';\r\n\r\ninterface Props {\r\n  error: string | null;\r\n  loading: boolean;\r\n}\r\n\r\nexport const InitError: React.FC<Props> = ({ error, loading }) => {\r\n  const dispatch = useAppDispatch();\r\n  const authId = useAppSelector((state) => state.auth.id);\r\n\r\n  const clickHandler = () => {\r\n    if (authId) {\r\n      dispatch(init(authId));\r\n      return;\r\n    }\r\n\r\n    dispatch(authorize());\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-screen w-screen flex justify-center items-center\">\r\n      <Result\r\n        status=\"warning\"\r\n        title=\"Виникла помилка під час завантаження додатку\"\r\n        subTitle={error}\r\n        extra={\r\n          <Button type=\"primary\" onClick={clickHandler} loading={loading}>\r\n            Спробувати ще раз\r\n          </Button>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Button, Result } from 'antd';\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router';\r\n\r\nexport const NotFound: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const clickHandler = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full w-full flex justify-center items-center\">\r\n      <Result\r\n        status=\"404\"\r\n        title=\"404\"\r\n        subTitle=\"Вибачте, такої сторінки не існує\"\r\n        extra={\r\n          <Button type=\"primary\" onClick={clickHandler}>\r\n            На головну\r\n          </Button>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Form, Input, Select, Button, Space } from 'antd';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { useForm } from 'antd/lib/form/Form';\r\n\r\nconst { Option } = Select;\r\n\r\ninterface Props {\r\n  onSubmit: ({ contact, query }: SearchFormData) => void;\r\n}\r\n\r\nexport interface SearchFormData {\r\n  query: string;\r\n  contact: '0' | '1' | '2';\r\n}\r\n\r\nexport const SearchForm: React.FC<Props> = ({ onSubmit }) => {\r\n  const query = useAppSelector((state) => state.search.query);\r\n\r\n  const contact = useAppSelector((state) => state.search.contact);\r\n  const isFetching = useAppSelector((state) => state.search.isUsersFetching);\r\n\r\n  const [form] = useForm();\r\n\r\n  useEffect(() => {\r\n    form.resetFields();\r\n  }, [form, query, contact]);\r\n\r\n  return (\r\n    <Form name=\"search\" form={form} onFinish={onSubmit}>\r\n      <Form.Item name=\"query\" initialValue={query ?? ''}>\r\n        <Input placeholder=\"Пошук...\" />\r\n      </Form.Item>\r\n\r\n      <Space size=\"middle\" className=\"mb-6\">\r\n        <Form.Item name=\"contact\" initialValue={String(contact)} noStyle>\r\n          <Select style={{ width: 150 }}>\r\n            <Option value={'0'}>Всі</Option>\r\n            <Option value={'1'}>Тільки контакти</Option>\r\n            <Option value={'2'}>Тільки не контакти</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Button type=\"primary\" htmlType=\"submit\" loading={isFetching}>\r\n          Шукати\r\n        </Button>\r\n      </Space>\r\n    </Form>\r\n  );\r\n};\r\n","import { Avatar, Button, Card, ConfigProvider, Empty, List } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { fetchUsers } from '../../features/search/searchSlice';\r\nimport { addContact, removeContact } from '../../features/contact/contactSlice';\r\n\r\nexport const UserList: React.FC = () => {\r\n  const [isInitRender, setIsInitRender] = useState(true);\r\n  const users = useAppSelector((state) => state.search.users);\r\n  const query = useAppSelector((state) => state.search.query);\r\n  const count = useAppSelector((state) => state.search.count);\r\n  const contact = useAppSelector((state) => state.search.contact);\r\n  const page = useAppSelector((state) => state.search.page);\r\n  const isFetching = useAppSelector((state) => state.search.isUsersFetching);\r\n  const contactsInProcess = useAppSelector(\r\n    (state) => state.contact.contactsInProcess\r\n  );\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isInitRender) {\r\n      setIsInitRender(false);\r\n      return;\r\n    }\r\n    dispatch(fetchUsers({ query, count, contact, page }));\r\n  }, [query, count, contact, page, dispatch, isInitRender]);\r\n\r\n  return (\r\n    <Card\r\n      className=\"w-full h-3/4 flex-grow mb-6\"\r\n      bodyStyle={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        overflowY: 'hidden',\r\n        height: '100%',\r\n      }}\r\n    >\r\n      <ConfigProvider\r\n        renderEmpty={() => (\r\n          <Empty\r\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\r\n            description={<span>Користувачі не знайдені</span>}\r\n          />\r\n        )}\r\n      >\r\n        <List\r\n          className={`overflow-y-scroll h-full ${\r\n            !users.length && 'flex justify-center items-center'\r\n          }`}\r\n          dataSource={users}\r\n          loading={isFetching}\r\n          renderItem={(item) => (\r\n            <List.Item\r\n              actions={\r\n                item.isContact === null\r\n                  ? []\r\n                  : [\r\n                      item.isContact === true ? (\r\n                        <Button\r\n                          loading={contactsInProcess.includes(item.id)}\r\n                          danger\r\n                          onClick={() => dispatch(removeContact(item.id))}\r\n                        >\r\n                          Видалити з контактів\r\n                        </Button>\r\n                      ) : (\r\n                        <Button\r\n                          loading={contactsInProcess.includes(item.id)}\r\n                          onClick={() => dispatch(addContact(item.id))}\r\n                        >\r\n                          Додати у контакти\r\n                        </Button>\r\n                      ),\r\n                    ]\r\n              }\r\n            >\r\n              <List.Item.Meta\r\n                avatar={<Avatar src={item.photo} icon={<UserOutlined />} />}\r\n                title={item.name}\r\n                description={\r\n                  <div>\r\n                    {item.status === 'student' &&\r\n                      `Студент групи ${item.group} кафедри ${item.department}`}\r\n\r\n                    {item.status === 'instructor' &&\r\n                      `Викладач кафедри ${item.department}`}\r\n                  </div>\r\n                }\r\n              />\r\n            </List.Item>\r\n          )}\r\n        ></List>\r\n      </ConfigProvider>\r\n    </Card>\r\n  );\r\n};\r\n","import { Pagination } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport {\r\n  useAppDispatch,\r\n  useAppSelector,\r\n  useErrorMessage,\r\n} from '../../app/hooks';\r\nimport {\r\n  contactChanged,\r\n  countChanged,\r\n  fetchingErrorChanged,\r\n  pageChanged,\r\n  queryChanged,\r\n} from '../../features/search/searchSlice';\r\nimport { SearchForm, SearchFormData } from './SearchForm';\r\nimport { UserList } from './UserList';\r\n\r\nexport const Search: React.FC = () => {\r\n  const [params, setParams] = useSearchParams();\r\n\r\n  const total = useAppSelector((state) => state.search.total);\r\n  const query = useAppSelector((state) => state.search.query);\r\n  const contact = useAppSelector((state) => state.search.contact);\r\n  const page = useAppSelector((state) => state.search.page);\r\n  const count = useAppSelector((state) => state.search.count);\r\n  const isFetching = useAppSelector((state) => state.search.isUsersFetching);\r\n  const fethingError = useAppSelector((state) => state.search.fetchingError);\r\n  useErrorMessage(fethingError, fetchingErrorChanged);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const queryParam = params.get('query');\r\n  const contactParam = params.get('contact');\r\n  const pageParam = params.get('page');\r\n  const countParam = params.get('count');\r\n\r\n  useEffect(() => {\r\n    dispatch(queryChanged(!queryParam ? '' : queryParam));\r\n\r\n    if (contactParam && ['0', '1', '2'].includes(contactParam)) {\r\n      dispatch(contactChanged(contactParam));\r\n    }\r\n\r\n    if (!isNaN(Number(pageParam)) && Number(pageParam) > 0) {\r\n      dispatch(pageChanged(Number(pageParam)));\r\n    }\r\n\r\n    if (!isNaN(Number(countParam)) && Number(countParam) > 0) {\r\n      dispatch(countChanged(Number(countParam)));\r\n    }\r\n  }, [contactParam, countParam, dispatch, pageParam, queryParam]);\r\n\r\n  const submitHandler = (data: SearchFormData) => {\r\n    if (data.query) {\r\n      params.set('query', data.query);\r\n    } else {\r\n      params.delete('query');\r\n    }\r\n\r\n    params.set('contact', data.contact);\r\n    params.set('page', '1');\r\n    params.set('count', String(count));\r\n\r\n    setParams(params);\r\n  };\r\n\r\n  const paginationChangeHandler = (newPage: number, newCount: number) => {\r\n    if (query) {\r\n      params.set('query', query);\r\n    } else {\r\n      params.delete('query');\r\n    }\r\n\r\n    params.set('contact', contact);\r\n\r\n    if (page !== newPage) {\r\n      params.set('page', String(newPage));\r\n    } else if (count !== newCount) {\r\n      params.set('page', '1');\r\n    }\r\n\r\n    params.set('count', String(newCount));\r\n    setParams(params);\r\n  };\r\n\r\n  return (\r\n    <section className=\"w-full h-full flex flex-col\">\r\n      <SearchForm onSubmit={submitHandler} />\r\n      <UserList />\r\n      <Pagination\r\n        disabled={isFetching}\r\n        current={page}\r\n        total={total ?? 0}\r\n        pageSize={count}\r\n        showSizeChanger\r\n        pageSizeOptions={['5', '10', '20']}\r\n        onChange={paginationChangeHandler}\r\n        className=\"self-center\"\r\n      />\r\n    </section>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Form, Input, Button, Upload, Avatar, Space } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport {\r\n  useAppSelector,\r\n  useErrorMessage,\r\n  useImageUpload,\r\n  useSuccessMessage,\r\n} from '../app/hooks';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  updateSucceedChanged,\r\n  updateUser,\r\n  updatingErrorChanged,\r\n} from '../features/user/userSlice';\r\nimport { signingOutErrorChanged, signOut } from '../features/auth/authSlice';\r\n\r\nexport interface SettingsFormValues {\r\n  name: string;\r\n  department: string;\r\n  group?: string;\r\n}\r\n\r\nexport const Settings: React.FC = () => {\r\n  const user = useAppSelector((state) => state.user.user);\r\n  const isUpdating = useAppSelector((state) => state.user.isUpdating);\r\n  const updateSucceed = useAppSelector((state) => state.user.updateSucceed);\r\n  const updatingError = useAppSelector((state) => state.user.updatingError);\r\n  const signingOutError = useAppSelector((state) => state.auth.signingOutError);\r\n\r\n  useErrorMessage(signingOutError, signingOutErrorChanged);\r\n  useErrorMessage(updatingError, updatingErrorChanged);\r\n  useSuccessMessage('Зміни застосовані', updateSucceed, updateSucceedChanged);\r\n\r\n  const dispatch = useDispatch();\r\n  const { img, handleChange, beforeUpload, dummyRequest } = useImageUpload(\r\n    user?.photo ?? null\r\n  );\r\n\r\n  const submitHandler = (values: SettingsFormValues) => {\r\n    dispatch(updateUser({ ...values, photo: img }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex gap-5 ml-auto mr-auto self-center\">\r\n      <div>\r\n        <Upload\r\n          name=\"avatar\"\r\n          showUploadList={false}\r\n          beforeUpload={beforeUpload}\r\n          customRequest={dummyRequest}\r\n          onChange={handleChange}\r\n        >\r\n          <Avatar size={200} shape=\"square\" src={img} icon={<UserOutlined />} />\r\n        </Upload>\r\n      </div>\r\n\r\n      <div className=\"w-96\">\r\n        <Form name=\"settings\" onFinish={submitHandler}>\r\n          <Form.Item\r\n            name=\"name\"\r\n            initialValue={user?.name}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Будь ласка, введіть своє ім'я\",\r\n                whitespace: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"П.І.Б.\" />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"department\"\r\n            initialValue={user?.department}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Будь ласка, введіть назву вашої кафедри',\r\n                whitespace: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input value={user?.department} placeholder=\"Ваша кафедра\" />\r\n          </Form.Item>\r\n\r\n          {user?.status === 'student' && (\r\n            <Form.Item\r\n              name=\"group\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Будь ласка, введіть назву вашої групи',\r\n                  whitespace: true,\r\n                },\r\n              ]}\r\n              initialValue={user.group}\r\n            >\r\n              <Input placeholder=\"Ваша група\" />\r\n            </Form.Item>\r\n          )}\r\n\r\n          <Form.Item>\r\n            <Space>\r\n              <Button type=\"primary\" htmlType=\"submit\" loading={isUpdating}>\r\n                Застосувати зміни\r\n              </Button>\r\n\r\n              <Button onClick={() => dispatch(signOut())}>\r\n                Вийти з акаунту\r\n              </Button>\r\n            </Space>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport { useAppSelector } from '../../app/hooks';\r\n\r\nexport const useRedirectFromAuth = () => {\r\n  const authId = useAppSelector((state) => state.auth.id);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (authId) {\r\n      navigate('/');\r\n    }\r\n  }, [authId, navigate]);\r\n};\r\n","import React from 'react';\r\nimport { UserBasic, WithPassword } from '../app/types';\r\n\r\nimport { Form, Input, Button } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { useRedirectFromAuth } from '../features/auth/hooks';\r\nimport { useAppSelector, useAppDispatch, useErrorMessage } from '../app/hooks';\r\nimport { signIn, signingInErrorChanged } from '../features/auth/authSlice';\r\n\r\ntype FormValues = Pick<UserBasic, 'login'> & WithPassword;\r\n\r\nexport const SignIn: React.FC = () => {\r\n  const isLoading = useAppSelector((state) => state.auth.isSigningIn);\r\n  const error = useAppSelector((state) => state.auth.signingInError);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useRedirectFromAuth();\r\n  useErrorMessage(error, signingInErrorChanged);\r\n\r\n  const submitHandler = (values: FormValues) => {\r\n    dispatch(signIn(values));\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-96 ml-auto mr-auto self-center\">\r\n      <Form name=\"login\" onFinish={submitHandler}>\r\n        <Form.Item\r\n          name=\"login\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Будь ласка, введіть логін',\r\n              whitespace: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Логін\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Будь ласка, введіть пароль',\r\n              whitespace: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password placeholder=\"Пароль\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n            Війти\r\n          </Button>\r\n          <Link to=\"/sign-up\">\r\n            <div className=\"inline-block text-blue-500 py-1 px-3 hover:text-blue-400 focus:text-blue-400\">\r\n              Зареєструватися\r\n            </div>\r\n          </Link>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Select, Button } from 'antd';\r\nimport { Status, User, WithPassword } from '../app/types';\r\nimport { Link } from 'react-router-dom';\r\nimport { useRedirectFromAuth } from '../features/auth/hooks';\r\nimport { useAppDispatch, useAppSelector, useErrorMessage } from '../app/hooks';\r\nimport { signingUpErrorChanged, signUp } from '../features/auth/authSlice';\r\n\r\nconst { Option } = Select;\r\n\r\ntype FormValues = User & WithPassword;\r\n\r\nexport const SignUp: React.FC = () => {\r\n  const isLoading = useAppSelector((state) => state.auth.isSigningUp);\r\n  const error = useAppSelector((state) => state.auth.signingUpError);\r\n  const dispatch = useAppDispatch();\r\n  useErrorMessage(error, signingUpErrorChanged);\r\n  const [status, setStatus] = useState<Status | null>(null);\r\n  useRedirectFromAuth();\r\n\r\n  const statusChangeHandler = (value: Status) => {\r\n    setStatus(value);\r\n  };\r\n\r\n  const submitHandler = (values: FormValues) => {\r\n    dispatch(signUp(values));\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-96 ml-auto mr-auto self-center\">\r\n      <Form name=\"registration\" onFinish={submitHandler}>\r\n        <Form.Item\r\n          name=\"login\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Будь ласка, введіть логін',\r\n              whitespace: true,\r\n            },\r\n\r\n            {\r\n              min: 4,\r\n              message: 'Логін повинен бути не коротше за 4 символи',\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Логін\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Будь ласка, введіть пароль',\r\n              whitespace: true,\r\n            },\r\n            {\r\n              min: 6,\r\n              message: 'Пароль повинен бути не коротше за 6 символів',\r\n            },\r\n          ]}\r\n        >\r\n          <Input.Password placeholder=\"Пароль\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"name\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Будь ласка, введіть своє ім'я\",\r\n              whitespace: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"П.І.Б.\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"status\"\r\n          rules={[\r\n            { required: true, message: 'Будь ласка, оберіть свій статус' },\r\n          ]}\r\n        >\r\n          <Select placeholder=\"Ваш статус\" onChange={statusChangeHandler}>\r\n            <Option value=\"student\">Студент</Option>\r\n            <Option value=\"instructor\">Викладач</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"department\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: 'Будь ласка, введіть назву Вашої кафедри',\r\n              whitespace: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"Ваша кафедра\" />\r\n        </Form.Item>\r\n\r\n        {status === 'student' && (\r\n          <Form.Item\r\n            name=\"group\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Будь ласка, введіть назву Вашої групи',\r\n                whitespace: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Ваша група\" />\r\n          </Form.Item>\r\n        )}\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n            Зареєструватися\r\n          </Button>\r\n          <Link to=\"/sign-in\">\r\n            <div className=\"inline-block text-blue-500 py-1 px-3 hover:text-blue-400 focus:text-blue-400\">\r\n              Вхід\r\n            </div>\r\n          </Link>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Navigate } from 'react-router';\r\nimport { useAppSelector } from '../../app/hooks';\r\n\r\ninterface Props {\r\n  children: React.ReactElement<any, any> | null;\r\n}\r\n\r\nexport const PrivateRoute: React.FC<Props> = ({ children }) => {\r\n  const authId = useAppSelector((state) => state.auth.id);\r\n  return authId ? children : <Navigate to=\"/sign-in\" />;\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { useAppDispatch, useAppSelector } from './app/hooks';\r\nimport { Body } from './components/Body';\r\nimport { Channel } from './components/Channel/Channel';\r\nimport { Direct } from './components/Direct/Direct';\r\nimport { EmptyMain } from './components/EmptyMain';\r\n\r\nimport { Header } from './components/Header/Header';\r\nimport { Init } from './components/Init';\r\nimport { InitError } from './components/InitError';\r\nimport { NotFound } from './components/NotFound';\r\nimport { Search } from './components/Search/Search';\r\nimport { Settings } from './components/Settings';\r\nimport { SignIn } from './components/SignIn';\r\nimport { SignUp } from './components/SignUp';\r\nimport { init } from './features/app/appSlice';\r\nimport { authorize } from './features/auth/authSlice';\r\nimport { PrivateRoute } from './features/auth/PrivateRoute';\r\n\r\nexport const App: React.FC = () => {\r\n  const authId = useAppSelector((state) => state.auth.id);\r\n  const isInit = useAppSelector((state) => state.app.isInit);\r\n  const isIniting = useAppSelector((state) => state.app.isIniting);\r\n  const isAuthorizing = useAppSelector((state) => state.auth.isAuthorizing);\r\n  const initError = useAppSelector((state) => state.app.error);\r\n  const authError = useAppSelector((state) => state.auth.authError);\r\n\r\n  const error = initError ?? authError;\r\n  const isLoading = isIniting || isAuthorizing;\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isInit && !initError) {\r\n      dispatch(authorize());\r\n    }\r\n  }, [dispatch, initError, isInit]);\r\n\r\n  useEffect(() => {\r\n    if (authId) {\r\n      dispatch(init(authId));\r\n    }\r\n  }, [authId, dispatch]);\r\n\r\n  if (error) {\r\n    return <InitError error={error} loading={isLoading} />;\r\n  }\r\n\r\n  if (isLoading && !error) return <Init />;\r\n\r\n  return (\r\n    <div className=\"box-border h-screen flex flex-col\">\r\n      <Header />\r\n      <section className=\"flex-grow flex overflow-hidden\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<Body />}>\r\n            <Route\r\n              index\r\n              element={\r\n                <PrivateRoute>\r\n                  <EmptyMain />\r\n                </PrivateRoute>\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/channel/:channelId\"\r\n              element={\r\n                <PrivateRoute>\r\n                  <Channel />\r\n                </PrivateRoute>\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/direct/:contactId\"\r\n              element={\r\n                <PrivateRoute>\r\n                  <Direct />\r\n                </PrivateRoute>\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/settings\"\r\n              element={\r\n                <PrivateRoute>\r\n                  <Settings />\r\n                </PrivateRoute>\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/search\"\r\n              element={\r\n                <PrivateRoute>\r\n                  <Search />\r\n                </PrivateRoute>\r\n              }\r\n            />\r\n            <Route path=\"*\" element={<NotFound />} />\r\n          </Route>\r\n          <Route path=\"/sign-in\" element={<SignIn />} />\r\n          <Route path=\"/sign-up\" element={<SignUp />} />\r\n          <Route path=\"*\" element={<NotFound />} />\r\n        </Routes>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport authReducer from '../features/auth/authSlice';\r\nimport userReducer from '../features/user/userSlice';\r\nimport channelReducer from '../features/channel/channelSlice';\r\nimport postReducer from '../features/post/postSlice';\r\nimport searchReducer from '../features/search/searchSlice';\r\nimport contactReducer from '../features/contact/contactSlice';\r\nimport directReducer from '../features/direct/directSlice';\r\nimport messageReducer from '../features/message/messageSlice';\r\n\r\nimport appReducer from '../features/app/appSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    user: userReducer,\r\n    channel: channelReducer,\r\n    post: postReducer,\r\n    app: appReducer,\r\n    search: searchReducer,\r\n    contact: contactReducer,\r\n    direct: directReducer,\r\n    message: messageReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport { App } from './App';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}